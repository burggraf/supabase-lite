openapi: 3.0.3
info:
  title: Application Server API
  description: API for managing applications in the Application Server
  version: 1.0.0

paths:
  /api/applications:
    get:
      summary: List all applications
      operationId: listApplications
      parameters:
        - name: status
          in: query
          description: Filter by application status
          schema:
            $ref: '#/components/schemas/ApplicationStatus'
        - name: runtimeType
          in: query
          description: Filter by runtime type
          schema:
            $ref: '#/components/schemas/RuntimeType'
      responses:
        '200':
          description: Applications list
          content:
            application/json:
              schema:
                type: object
                properties:
                  applications:
                    type: array
                    items:
                      $ref: '#/components/schemas/Application'
                  total:
                    type: integer

    post:
      summary: Create new application
      operationId: createApplication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateApplicationRequest'
      responses:
        '201':
          description: Application created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Application'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/applications/{appId}:
    get:
      summary: Get application by ID
      operationId: getApplication
      parameters:
        - name: appId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Application details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Application'
        '404':
          description: Application not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    put:
      summary: Update application
      operationId: updateApplication
      parameters:
        - name: appId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateApplicationRequest'
      responses:
        '200':
          description: Application updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Application'
        '404':
          description: Application not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      summary: Delete application
      operationId: deleteApplication
      parameters:
        - name: appId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Application deleted
        '404':
          description: Application not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/applications/{appId}/start:
    post:
      summary: Start application
      operationId: startApplication
      parameters:
        - name: appId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Application starting
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Application'
        '409':
          description: Application already running
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/applications/{appId}/stop:
    post:
      summary: Stop application
      operationId: stopApplication
      parameters:
        - name: appId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Application stopping
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Application'

  /api/applications/{appId}/deploy:
    post:
      summary: Deploy application
      operationId: deployApplication
      parameters:
        - name: appId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                files:
                  type: array
                  items:
                    type: string
                    format: binary
                config:
                  $ref: '#/components/schemas/DeploymentConfig'
      responses:
        '202':
          description: Deployment started
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationDeployment'

components:
  schemas:
    Application:
      type: object
      required:
        - id
        - name
        - runtimeId
        - status
        - createdAt
        - updatedAt
      properties:
        id:
          type: string
          pattern: '^[a-z0-9-]{3,50}$'
        name:
          type: string
          minLength: 1
          maxLength: 100
        description:
          type: string
          maxLength: 500
        runtimeId:
          type: string
        status:
          $ref: '#/components/schemas/ApplicationStatus'
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        deploymentId:
          type: string
        metadata:
          $ref: '#/components/schemas/ApplicationMetadata'

    CreateApplicationRequest:
      type: object
      required:
        - id
        - name
        - runtimeId
      properties:
        id:
          type: string
          pattern: '^[a-z0-9-]{3,50}$'
        name:
          type: string
          minLength: 1
          maxLength: 100
        description:
          type: string
          maxLength: 500
        runtimeId:
          type: string
        metadata:
          $ref: '#/components/schemas/ApplicationMetadata'

    UpdateApplicationRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
        description:
          type: string
          maxLength: 500
        metadata:
          $ref: '#/components/schemas/ApplicationMetadata'

    ApplicationMetadata:
      type: object
      properties:
        entryPoint:
          type: string
        buildCommand:
          type: string
        startCommand:
          type: string
        environmentVariables:
          type: object
          additionalProperties:
            type: string
        dependencies:
          type: array
          items:
            type: string

    ApplicationStatus:
      type: string
      enum:
        - stopped
        - starting
        - running
        - stopping
        - deploying
        - error

    RuntimeType:
      type: string
      enum:
        - static
        - nodejs
        - nextjs
        - python
        - edge-functions

    ApplicationDeployment:
      type: object
      required:
        - id
        - applicationId
        - status
        - runtimeId
      properties:
        id:
          type: string
        applicationId:
          type: string
        status:
          $ref: '#/components/schemas/DeploymentStatus'
        runtimeId:
          type: string
        deployedAt:
          type: string
          format: date-time
        deployedBy:
          type: string
        config:
          $ref: '#/components/schemas/DeploymentConfig'

    DeploymentConfig:
      type: object
      properties:
        buildArgs:
          type: object
          additionalProperties:
            type: string
        environmentVariables:
          type: object
          additionalProperties:
            type: string

    DeploymentStatus:
      type: string
      enum:
        - pending
        - uploading
        - processing
        - deployed
        - failed

    Error:
      type: object
      required:
        - message
      properties:
        message:
          type: string
        code:
          type: string
        details:
          type: object