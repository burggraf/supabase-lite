name: Test Coverage

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test-main-app:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run linter
      run: npm run lint
    
    - name: Run tests with coverage
      run: npm run test:ci
    
    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: main-app
        name: main-app-coverage
        fail_ci_if_error: false
    
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-main
        path: test-results.xml
    
    - name: Upload coverage report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: coverage-report-main
        path: coverage/

  test-supabase-lite-package:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: 'packages/supabase-lite/package-lock.json'
    
    - name: Install dependencies
      working-directory: packages/supabase-lite
      run: npm ci
    
    - name: Build package
      working-directory: packages/supabase-lite
      run: npm run build
    
    - name: Run tests with coverage
      working-directory: packages/supabase-lite
      run: npm run test:ci
    
    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./packages/supabase-lite/coverage/lcov.info
        flags: supabase-lite-package
        name: supabase-lite-package-coverage
        fail_ci_if_error: false
    
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-package
        path: packages/supabase-lite/test-results.xml
    
    - name: Upload coverage report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: coverage-report-package
        path: packages/supabase-lite/coverage/

  integration-tests:
    runs-on: ubuntu-latest
    needs: [test-main-app]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run integration tests
      run: npm run test:integration
    
    - name: Run performance tests
      run: npm run test:performance

  coverage-report:
    runs-on: ubuntu-latest
    needs: [test-main-app, test-supabase-lite-package]
    if: always()
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download main app coverage
      uses: actions/download-artifact@v4
      with:
        name: coverage-report-main
        path: coverage-main/
    
    - name: Download package coverage
      uses: actions/download-artifact@v4
      with:
        name: coverage-report-package
        path: coverage-package/
    
    - name: Generate combined coverage report
      run: |
        echo "## Test Coverage Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Main Application" >> $GITHUB_STEP_SUMMARY
        if [ -f coverage-main/coverage-summary.json ]; then
          echo "Coverage data found for main application" >> $GITHUB_STEP_SUMMARY
        else
          echo "‚ùå No coverage data found for main application" >> $GITHUB_STEP_SUMMARY
        fi
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Supabase Lite Package" >> $GITHUB_STEP_SUMMARY
        if [ -f coverage-package/coverage-summary.json ]; then
          echo "Coverage data found for supabase-lite package" >> $GITHUB_STEP_SUMMARY
        else
          echo "‚ùå No coverage data found for supabase-lite package" >> $GITHUB_STEP_SUMMARY
        fi
    
    - name: Comment PR with coverage
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          let comment = '## üìä Test Coverage Report\n\n';
          
          // Read main app coverage if available
          try {
            if (fs.existsSync('coverage-main/coverage-summary.json')) {
              const mainCoverage = JSON.parse(fs.readFileSync('coverage-main/coverage-summary.json', 'utf8'));
              const total = mainCoverage.total;
              comment += '### Main Application\n';
              comment += `- **Lines**: ${total.lines.pct}% (${total.lines.covered}/${total.lines.total})\n`;
              comment += `- **Functions**: ${total.functions.pct}% (${total.functions.covered}/${total.functions.total})\n`;
              comment += `- **Branches**: ${total.branches.pct}% (${total.branches.covered}/${total.branches.total})\n`;
              comment += `- **Statements**: ${total.statements.pct}% (${total.statements.covered}/${total.statements.total})\n\n`;
            }
          } catch (error) {
            comment += '### Main Application\n‚ùå Coverage data not available\n\n';
          }
          
          // Read package coverage if available
          try {
            if (fs.existsSync('coverage-package/coverage-summary.json')) {
              const packageCoverage = JSON.parse(fs.readFileSync('coverage-package/coverage-summary.json', 'utf8'));
              const total = packageCoverage.total;
              comment += '### Supabase Lite Package\n';
              comment += `- **Lines**: ${total.lines.pct}% (${total.lines.covered}/${total.lines.total})\n`;
              comment += `- **Functions**: ${total.functions.pct}% (${total.functions.covered}/${total.functions.total})\n`;
              comment += `- **Branches**: ${total.branches.pct}% (${total.branches.covered}/${total.branches.total})\n`;
              comment += `- **Statements**: ${total.statements.pct}% (${total.statements.covered}/${total.statements.total})\n`;
            }
          } catch (error) {
            comment += '### Supabase Lite Package\n‚ùå Coverage data not available\n';
          }
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });