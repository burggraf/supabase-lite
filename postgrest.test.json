[
  {
    "id": "select",
    "title": "Fetch data: select()",
    "$ref": "@supabase/postgrest-js.PostgrestQueryBuilder.select",
    "notes": "- By default, Supabase projects return a maximum of 1,000 rows. This setting can be changed in your project's [API settings](/dashboard/project/_/settings/api). It's recommended that you keep it low to limit the payload size of accidental or malicious requests. You can use `range()` queries to paginate through your data.\n- `select()` can be combined with [Filters](/docs/reference/javascript/using-filters)\n- `select()` can be combined with [Modifiers](/docs/reference/javascript/using-modifiers)\n- `apikey` is a reserved keyword if you're using the [Supabase Platform](/docs/guides/platform) and [should be avoided as a column name](https://github.com/supabase/supabase/issues/5465).\n",
    "examples": [
      {
        "id": "getting-your-data",
        "name": "Getting your data",
        "code": "```js\nconst { data, error } = await supabase\n  .from('characters')\n  .select()\n```\n",
        "data": {
          "sql": "```sql\nCREATE TABLE\n  characters (id int8 primary key, name text);\n\nINSERT INTO\n  characters (id, name)\nVALUES\n  (1, 'Harry'),\n  (2, 'Frodo'),\n  (3, 'Katniss');\n```\n"
        },
        "response": "```json\n{\n  \"data\": [\n    {\n      \"id\": 1,\n      \"name\": \"Harry\"\n    },\n    {\n      \"id\": 2,\n      \"name\": \"Frodo\"\n    },\n    {\n      \"id\": 3,\n      \"name\": \"Katniss\"\n    }\n  ],\n  \"status\": 200,\n  \"statusText\": \"OK\"\n}\n```\n",
        "results": {
          "passed": true,
          "log": [
            {
              "type": "info",
              "message": "Starting test: Getting your data",
              "timestamp": "2025-09-22T15:42:20.488Z"
            },
            {
              "type": "info",
              "message": "Public schema reset for test isolation",
              "timestamp": "2025-09-22T15:42:20.641Z"
            },
            {
              "type": "info",
              "message": "Database seeded successfully",
              "timestamp": "2025-09-22T15:42:20.699Z"
            },
            {
              "type": "info",
              "message": "Test script generated",
              "timestamp": "2025-09-22T15:42:20.701Z"
            },
            {
              "type": "info",
              "message": "Test passed - results match expected output",
              "timestamp": "2025-09-22T15:42:20.845Z"
            }
          ],
          "skip": true
        }
      },
      {
        "id": "selecting-specific-columns",
        "name": "Selecting specific columns",
        "code": "```js\nconst { data, error } = await supabase\n  .from('characters')\n  .select('name')\n```\n",
        "data": {
          "sql": "```sql\nCREATE TABLE\n  characters (id int8 primary key, name text);\n\nINSERT INTO\n  characters (id, name)\nVALUES\n  (1, 'Frodo'),\n  (2, 'Harry'),\n  (3, 'Katniss');\n```\n"
        },
        "response": "```json\n{\n  \"data\": [\n    {\n      \"name\": \"Frodo\"\n    },\n    {\n      \"name\": \"Harry\"\n    },\n    {\n      \"name\": \"Katniss\"\n    }\n  ],\n  \"status\": 200,\n  \"statusText\": \"OK\"\n}\n```\n",
        "results": {
          "passed": true,
          "log": [
            {
              "type": "info",
              "message": "Starting test: Selecting specific columns",
              "timestamp": "2025-09-22T15:42:20.947Z"
            },
            {
              "type": "info",
              "message": "Public schema reset for test isolation",
              "timestamp": "2025-09-22T15:42:21.117Z"
            },
            {
              "type": "info",
              "message": "Database seeded successfully",
              "timestamp": "2025-09-22T15:42:21.176Z"
            },
            {
              "type": "info",
              "message": "Test script generated",
              "timestamp": "2025-09-22T15:42:21.177Z"
            },
            {
              "type": "info",
              "message": "Test passed - results match expected output",
              "timestamp": "2025-09-22T15:42:21.314Z"
            }
          ],
          "skip": true
        }
      },
      {
        "id": "query-referenced-tables",
        "name": "Query referenced tables",
        "description": "If your database has foreign key relationships, you can query related tables too.\n",
        "code": "```js\nconst { data, error } = await supabase\n  .from('orchestral_sections')\n  .select(`\n    name,\n    instruments (\n      name\n    )\n  `)\n```\n",
        "data": {
          "sql": "```sql\nCREATE TABLE\n  orchestral_sections (id int8 primary key, name text);\nCREATE TABLE\n  instruments (\n    id int8 primary key,\n    section_id int8 not null references orchestral_sections,\n    name text\n  );\n\nINSERT INTO\n  orchestral_sections (id, name)\nVALUES\n  (1, 'strings'),\n  (2, 'woodwinds');\nINSERT INTO\n  instruments (id, section_id, name)\nVALUES\n  (1, 2, 'flute'),\n  (2, 1, 'violin');\n```\n"
        },
        "response": "```json\n{\n  \"data\": [\n    {\n      \"name\": \"strings\",\n      \"instruments\": [\n        {\n          \"name\": \"violin\"\n        }\n      ]\n    },\n    {\n      \"name\": \"woodwinds\",\n      \"instruments\": [\n        {\n          \"name\": \"flute\"\n        }\n      ]\n    }\n  ],\n  \"status\": 200,\n  \"statusText\": \"OK\"\n}\n```\n",
        "results": {
          "passed": true,
          "log": [
            {
              "type": "info",
              "message": "Starting test: Query referenced tables",
              "timestamp": "2025-09-22T15:42:21.416Z"
            },
            {
              "type": "info",
              "message": "Public schema reset for test isolation",
              "timestamp": "2025-09-22T15:42:21.578Z"
            },
            {
              "type": "info",
              "message": "Database seeded successfully",
              "timestamp": "2025-09-22T15:42:21.744Z"
            },
            {
              "type": "info",
              "message": "Test script generated",
              "timestamp": "2025-09-22T15:42:21.745Z"
            },
            {
              "type": "info",
              "message": "Test passed - results match expected output",
              "timestamp": "2025-09-22T15:42:21.897Z"
            }
          ],
          "skip": true
        }
      },
      {
        "id": "query-referenced-tables-with-spaces-in-their-names",
        "name": "Query referenced tables with spaces in their names",
        "description": "If your table name contains spaces, you must use double quotes in the `select` statement to reference the table.\n",
        "code": "```js\nconst { data, error } = await supabase\n  .from('orchestral sections')\n  .select(`\n    name,\n    \"musical instruments\" (\n      name\n    )\n  `)\n```\n",
        "data": {
          "sql": "```sql\nCREATE TABLE\n  \"orchestral sections\" (id int8 primary key, name text);\nCREATE TABLE\n  \"musical instruments\" (\n    id int8 primary key,\n    section_id int8 not null references \"orchestral sections\",\n    name text\n  );\n\nINSERT INTO\n  \"orchestral sections\" (id, name)\nVALUES\n  (1, 'strings'),\n  (2, 'woodwinds');\nINSERT INTO\n  \"musical instruments\" (id, section_id, name)\nVALUES\n  (1, 2, 'flute'),\n  (2, 1, 'violin');\n```\n"
        },
        "response": "```json\n{\n  \"data\": [\n    {\n      \"name\": \"strings\",\n      \"musical instruments\": [\n        {\n          \"name\": \"violin\"\n        }\n      ]\n    },\n    {\n      \"name\": \"woodwinds\",\n      \"musical instruments\": [\n        {\n          \"name\": \"flute\"\n        }\n      ]\n    }\n  ],\n  \"status\": 200,\n  \"statusText\": \"OK\"\n}\n```\n",
        "results": {
          "passed": true,
          "log": [
            {
              "type": "info",
              "message": "Starting test: Query referenced tables with spaces in their names",
              "timestamp": "2025-09-22T15:42:21.999Z"
            },
            {
              "type": "info",
              "message": "Public schema reset for test isolation",
              "timestamp": "2025-09-22T15:42:22.167Z"
            },
            {
              "type": "info",
              "message": "Database seeded successfully",
              "timestamp": "2025-09-22T15:42:22.331Z"
            },
            {
              "type": "info",
              "message": "Test script generated",
              "timestamp": "2025-09-22T15:42:22.333Z"
            },
            {
              "type": "info",
              "message": "Test passed - results match expected output",
              "timestamp": "2025-09-22T15:42:22.480Z"
            }
          ],
          "skip": true
        }
      },
      {
        "id": "query-referenced-tables-through-a-join-table",
        "name": "Query referenced tables through a join table",
        "code": "```ts\nconst { data, error } = await supabase\n  .from('users')\n  .select(`\n    name,\n    teams (\n      name\n    )\n  `)\n  ```\n",
        "data": {
          "sql": "```sql\nCREATE TABLE\n  users (\n    id int8 primary key,\n    name text\n  );\nCREATE TABLE\n  teams (\n    id int8 primary key,\n    name text\n  );\n-- join table\nCREATE TABLE\n  users_teams (\n    user_id int8 not null references users,\n    team_id int8 not null references teams,\n    -- both foreign keys must be part of a composite primary key\n    primary key (user_id, team_id)\n  );\n\nINSERT INTO\n  users (id, name)\nVALUES\n  (1, 'Kiran'),\n  (2, 'Evan');\nINSERT INTO\n  teams (id, name)\nVALUES\n  (1, 'Green'),\n  (2, 'Blue');\nINSERT INTO\n  users_teams (user_id, team_id)\nVALUES\n  (1, 1),\n  (1, 2),\n  (2, 2);\n```\n"
        },
        "response": "```json\n  {\n    \"data\": [\n      {\n        \"name\": \"Kiran\",\n        \"teams\": [\n          {\n            \"name\": \"Green\"\n          },\n          {\n            \"name\": \"Blue\"\n          }\n        ]\n      },\n      {\n        \"name\": \"Evan\",\n        \"teams\": [\n          {\n            \"name\": \"Blue\"\n          }\n        ]\n      }\n    ],\n    \"status\": 200,\n    \"statusText\": \"OK\"\n  }\n  ```\n",
        "description": "If you're in a situation where your tables are **NOT** directly\nrelated, but instead are joined by a _join table_, you can still use\nthe `select()` method to query the related data. The join table needs\nto have the foreign keys as part of its composite primary key.\n",
        "hideCodeBlock": true,
        "results": {
          "passed": true,
          "log": [
            {
              "type": "info",
              "message": "Starting test: Query referenced tables through a join table",
              "timestamp": "2025-09-22T15:42:22.583Z"
            },
            {
              "type": "info",
              "message": "Public schema reset for test isolation",
              "timestamp": "2025-09-22T15:42:22.750Z"
            },
            {
              "type": "info",
              "message": "Database seeded successfully",
              "timestamp": "2025-09-22T15:42:23.026Z"
            },
            {
              "type": "info",
              "message": "Test script generated",
              "timestamp": "2025-09-22T15:42:23.026Z"
            },
            {
              "type": "info",
              "message": "Test passed - results match expected output",
              "timestamp": "2025-09-22T15:42:23.197Z"
            }
          ],
          "skip": true
        }
      },
      {
        "id": "query-the-same-referenced-table-multiple-times",
        "name": "Query the same referenced table multiple times",
        "code": "```ts\nconst { data, error } = await supabase\n  .from('messages')\n  .select(`\n    content,\n    from:sender_id(name),\n    to:receiver_id(name)\n  `)\n\n// To infer types, use the name of the table (in this case `users`) and\n// the name of the foreign key constraint.\nconst { data, error } = await supabase\n  .from('messages')\n  .select(`\n    content,\n    from:users!messages_sender_id_fkey(name),\n    to:users!messages_receiver_id_fkey(name)\n  `)\n```\n",
        "data": {
          "sql": "```sql\n CREATE TABLE\n users (id int8 primary key, name text);\n\n CREATE TABLE\n   messages (\n     sender_id int8 not null references users,\n     receiver_id int8 not null references users,\n     content text\n   );\n\n INSERT INTO\n   users (id, name)\n VALUES\n   (1, 'Kiran'),\n   (2, 'Evan');\n\n INSERT INTO\n   messages (sender_id, receiver_id, content)\n VALUES\n   (1, 2, '👋');\n ```\n"
        },
        "response": "```json\n{\n  \"data\": [\n    {\n      \"content\": \"👋\",\n      \"from\": {\n        \"name\": \"Kiran\"\n      },\n      \"to\": {\n        \"name\": \"Evan\"\n      }\n    }\n  ],\n  \"status\": 200,\n  \"statusText\": \"OK\"\n}\n```\n",
        "description": "If you need to query the same referenced table twice, use the name of the\njoined column to identify which join to use. You can also give each\ncolumn an alias.\n",
        "hideCodeBlock": true,
        "results": {
          "passed": true,
          "log": [
            {
              "type": "info",
              "message": "Starting test: Query the same referenced table multiple times",
              "timestamp": "2025-09-22T15:42:25.065Z"
            },
            {
              "type": "info",
              "message": "Public schema reset for test isolation",
              "timestamp": "2025-09-22T15:42:25.223Z"
            },
            {
              "type": "info",
              "message": "Database seeded successfully",
              "timestamp": "2025-09-22T15:42:25.387Z"
            },
            {
              "type": "info",
              "message": "Test script generated",
              "timestamp": "2025-09-22T15:42:25.389Z"
            },
            {
              "type": "info",
              "message": "Test passed - results match expected output",
              "timestamp": "2025-09-22T15:42:25.537Z"
            }
          ],
          "skip": true
        }
      },
      {
        "id": "query-nested-foreign-tables-through-a-join-table",
        "name": "Query nested foreign tables through a join table",
        "code": "```ts\n  const { data, error } = await supabase\n    .from('games')\n    .select(`\n      game_id:id,\n      away_team:teams!games_away_team_fkey (\n        users (\n          id,\n          name\n        )\n      )\n    `)\n  ```\n",
        "data": {
          "sql": "```sql\nCREATE TABLE\n  users (\n    id int8 primary key,\n    name text\n  );\nCREATE TABLE\n  teams (\n    id int8 primary key,\n    name text\n  );\n-- join table\nCREATE TABLE\n  users_teams (\n    user_id int8 not null references users,\n    team_id int8 not null references teams,\n\n    primary key (user_id, team_id)\n  );\nCREATE TABLE\n  games (\n    id int8 primary key,\n    home_team int8 not null references teams,\n    away_team int8 not null references teams,\n    name text\n  );\n\ninsert into users (id, name)\nVALUES\n  (1, 'Kiran'),\n  (2, 'Evan');\nINSERT INTO\n  teams (id, name)\nVALUES\n  (1, 'Green'),\n  (2, 'Blue');\nINSERT INTO\n  users_teams (user_id, team_id)\nVALUES\n  (1, 1),\n  (1, 2),\n  (2, 2);\nINSERT INTO\n  games (id, home_team, away_team, name)\nVALUES\n  (1, 1, 2, 'Green vs Blue'),\n  (2, 2, 1, 'Blue vs Green');\n```\n"
        },
        "response": "```json\n  {\n    \"data\": [\n      {\n        \"game_id\": 1,\n        \"away_team\": {\n          \"users\": [\n            {\n              \"id\": 1,\n              \"name\": \"Kiran\"\n            },\n            {\n              \"id\": 2,\n              \"name\": \"Evan\"\n            }\n          ]\n        }\n      },\n      {\n        \"game_id\": 2,\n        \"away_team\": {\n          \"users\": [\n            {\n              \"id\": 1,\n              \"name\": \"Kiran\"\n            }\n          ]\n        }\n      }\n    ],\n    \"status\": 200,\n    \"statusText\": \"OK\"\n  }\n  ```\n",
        "description": "You can use the result of a joined table to gather data in\nanother foreign table. With multiple references to the same foreign\ntable you must specify the column on which to conduct the join.\n",
        "hideCodeBlock": true,
        "results": {
          "passed": true,
          "log": [
            {
              "type": "info",
              "message": "Starting test: Query nested foreign tables through a join table",
              "timestamp": "2025-09-22T15:42:25.640Z"
            },
            {
              "type": "info",
              "message": "Public schema reset for test isolation",
              "timestamp": "2025-09-22T15:42:25.804Z"
            },
            {
              "type": "info",
              "message": "Database seeded successfully",
              "timestamp": "2025-09-22T15:42:26.188Z"
            },
            {
              "type": "info",
              "message": "Test script generated",
              "timestamp": "2025-09-22T15:42:26.189Z"
            },
            {
              "type": "info",
              "message": "Test passed - results match expected output",
              "timestamp": "2025-09-22T15:42:26.365Z"
            }
          ],
          "skip": true
        }
      },
      {
        "id": "filtering-through-referenced-tables",
        "name": "Filtering through referenced tables",
        "code": "```ts\nconst { data, error } = await supabase\n  .from('instruments')\n  .select('name, orchestral_sections(*)')\n  .eq('orchestral_sections.name', 'percussion')\n```\n",
        "data": {
          "sql": "```sql\nCREATE TABLE\n  orchestral_sections (id int8 primary key, name text);\nCREATE TABLE\n  instruments (\n    id int8 primary key,\n    section_id int8 not null references orchestral_sections,\n    name text\n  );\n\nINSERT INTO\n  orchestral_sections (id, name)\nVALUES\n  (1, 'strings'),\n  (2, 'woodwinds');\nINSERT INTO\n  instruments (id, section_id, name)\nVALUES\n  (1, 2, 'flute'),\n  (2, 1, 'violin');\n```\n"
        },
        "response": "```json\n{\n  \"data\": [\n    {\n      \"name\": \"flute\",\n      \"orchestral_sections\": null\n    },\n    {\n      \"name\": \"violin\",\n      \"orchestral_sections\": null\n    }\n  ],\n  \"status\": 200,\n  \"statusText\": \"OK\"\n}\n```\n",
        "description": "If the filter on a referenced table's column is not satisfied, the referenced\ntable returns `[]` or `null` but the parent table is not filtered out.\nIf you want to filter out the parent table rows, use the `!inner` hint\n",
        "hideCodeBlock": true,
        "results": {
          "passed": true,
          "log": [
            {
              "type": "info",
              "message": "Starting test: Filtering through referenced tables",
              "timestamp": "2025-09-22T15:42:26.468Z"
            },
            {
              "type": "info",
              "message": "Public schema reset for test isolation",
              "timestamp": "2025-09-22T15:42:26.632Z"
            },
            {
              "type": "info",
              "message": "Database seeded successfully",
              "timestamp": "2025-09-22T15:42:26.797Z"
            },
            {
              "type": "info",
              "message": "Test script generated",
              "timestamp": "2025-09-22T15:42:26.798Z"
            },
            {
              "type": "info",
              "message": "Test passed - results match expected output",
              "timestamp": "2025-09-22T15:42:26.942Z"
            }
          ],
          "skip": true
        }
      },
      {
        "id": "querying-referenced-table-with-count",
        "name": "Querying referenced table with count",
        "code": "```ts\nconst { data, error } = await supabase\n  .from('orchestral_sections')\n  .select(`*, instruments(count)`)\n```\n",
        "data": {
          "sql": "```sql\ncreate table orchestral_sections (\n  \"id\" \"uuid\" primary key default gen_random_uuid() not null,\n  \"name\" text\n);\n\ncreate table instruments (\n  \"id\" \"uuid\" primary key default gen_random_uuid() not null,\n  \"name\" text,\n  \"section_id\" \"uuid\" references public.orchestral_sections on delete cascade\n);\n\nwith section as (\n  insert into orchestral_sections (name)\n  values ('strings') returning id\n)\ninsert into instruments (name, section_id) VALUES\n('violin', (select id from section)),\n('viola', (select id from section)),\n('cello', (select id from section)),\n('double bass', (select id from section));\n```\n"
        },
        "response": "```json\n{\n  \"data\": [\n    {\n      \"id\": \"*\",\n      \"name\": \"strings\",\n      \"instruments\": [\n        {\n          \"count\": 4\n        }\n      ]\n    }\n  ],\n  \"status\": 200,\n  \"statusText\": \"OK\"\n}\n```\n",
        "description": "You can get the number of rows in a related table by using the\n**count** property.\n",
        "hideCodeBlock": true,
        "results": {
          "passed": true,
          "log": [
            {
              "type": "info",
              "message": "Starting test: Querying referenced table with count",
              "timestamp": "2025-09-22T15:42:27.045Z"
            },
            {
              "type": "info",
              "message": "Public schema reset for test isolation",
              "timestamp": "2025-09-22T15:42:27.213Z"
            },
            {
              "type": "info",
              "message": "Database seeded successfully",
              "timestamp": "2025-09-22T15:42:27.325Z"
            },
            {
              "type": "info",
              "message": "Test script generated",
              "timestamp": "2025-09-22T15:42:27.326Z"
            },
            {
              "type": "info",
              "message": "Test passed - results match expected output",
              "timestamp": "2025-09-22T15:42:27.465Z"
            }
          ],
          "skip": true
        }
      },
      {
        "id": "querying-with-count-option",
        "name": "Querying with count option",
        "code": "```ts\nconst { count, error } = await supabase\n  .from('characters')\n  .select('*', { count: 'exact', head: true })\n```\n",
        "data": {
          "sql": "```sql\nCREATE TABLE\n  characters (id int8 primary key, name text);\n\nINSERT INTO\n  characters (id, name)\nVALUES\n  (1, 'Luke'),\n  (2, 'Leia'),\n  (3, 'Han');\n```\n"
        },
        "response": "```json\n{\n  \"count\": 3,\n  \"status\": 200,\n  \"statusText\": \"OK\"\n}\n```\n",
        "description": "You can get the number of rows by using the\n[count](/docs/reference/javascript/select#parameters) option.\n",
        "hideCodeBlock": true,
        "results": {
          "passed": true,
          "log": [
            {
              "type": "info",
              "message": "Starting test: Querying with count option",
              "timestamp": "2025-09-22T15:42:27.567Z"
            },
            {
              "type": "info",
              "message": "Public schema reset for test isolation",
              "timestamp": "2025-09-22T15:42:27.732Z"
            },
            {
              "type": "info",
              "message": "Database seeded successfully",
              "timestamp": "2025-09-22T15:42:27.789Z"
            },
            {
              "type": "info",
              "message": "Test script generated",
              "timestamp": "2025-09-22T15:42:27.790Z"
            },
            {
              "type": "info",
              "message": "Test passed - results match expected output",
              "timestamp": "2025-09-22T15:42:27.925Z"
            }
          ],
          "skip": true
        }
      },
      {
        "id": "querying-json-data",
        "name": "Querying JSON data",
        "code": "```ts\nconst { data, error } = await supabase\n  .from('users')\n  .select(`\n    id, name,\n    address->city\n  `)\n```\n",
        "data": {
          "sql": "```sql\nCREATE TABLE\n  users (\n    id int8 primary key,\n    name text,\n    address jsonb\n  );\n\nINSERT INTO\n  users (id, name, address)\nVALUES\n  (1, 'Frodo', '{\"city\":\"Hobbiton\"}');\n```\n"
        },
        "response": "```json\n{\n  \"data\": [\n    {\n      \"id\": 1,\n      \"name\": \"Frodo\",\n      \"city\": \"Hobbiton\"\n    }\n  ],\n  \"status\": 200,\n  \"statusText\": \"OK\"\n}\n```\n",
        "description": "You can select and filter data inside of\n[JSON](/docs/guides/database/json) columns. Postgres offers some\n[operators](/docs/guides/database/json#query-the-jsonb-data) for\nquerying JSON data.\n",
        "hideCodeBlock": true,
        "results": {
          "passed": true,
          "log": [
            {
              "type": "info",
              "message": "Starting test: Querying JSON data",
              "timestamp": "2025-09-22T15:42:29.786Z"
            },
            {
              "type": "info",
              "message": "Public schema reset for test isolation",
              "timestamp": "2025-09-22T15:42:29.945Z"
            },
            {
              "type": "info",
              "message": "Database seeded successfully",
              "timestamp": "2025-09-22T15:42:30.002Z"
            },
            {
              "type": "info",
              "message": "Test script generated",
              "timestamp": "2025-09-22T15:42:30.003Z"
            },
            {
              "type": "info",
              "message": "Test passed - results match expected output",
              "timestamp": "2025-09-22T15:42:30.140Z"
            }
          ],
          "skip": true
        }
      },
      {
        "id": "querying-referenced-table-with-inner-join",
        "name": "Querying referenced table with inner join",
        "code": "```ts\nconst { data, error } = await supabase\n  .from('instruments')\n  .select('name, orchestral_sections!inner(name)')\n  .eq('orchestral_sections.name', 'woodwinds')\n  .order('name')\n  .limit(1)\n```\n",
        "data": {
          "sql": "```sql\ncreate table orchestral_sections (\n  \"id\" \"uuid\" primary key default gen_random_uuid() not null,\n  \"name\" text\n);\n\ncreate table instruments (\n  \"id\" \"uuid\" primary key default gen_random_uuid() not null,\n  \"name\" text,\n  \"section_id\" \"uuid\" references public.orchestral_sections on delete cascade\n);\n\nwith section as (\n  insert into orchestral_sections (name)\n  values ('woodwinds') returning id\n)\ninsert into instruments (name, section_id) VALUES\n('flute', (select id from section)),\n('clarinet', (select id from section)),\n('bassoon', (select id from section)),\n('piccolo', (select id from section));\n```\n"
        },
        "response": "```json\n{\n  \"data\": [\n    {\n      \"name\": \"bassoon\",\n      \"orchestral_sections\": {\"name\": \"woodwinds\"}\n    }\n  ],\n  \"status\": 200,\n  \"statusText\": \"OK\"\n}\n```\n",
        "description": "If you don't want to return the referenced table contents, you can leave the parenthesis empty.\nLike `.select('name, orchestral_sections!inner()')`.\n",
        "hideCodeBlock": true,
        "results": {
          "passed": true,
          "log": [
            {
              "type": "info",
              "message": "Starting test: Querying referenced table with inner join",
              "timestamp": "2025-09-22T15:42:30.241Z"
            },
            {
              "type": "info",
              "message": "Public schema reset for test isolation",
              "timestamp": "2025-09-22T15:42:30.408Z"
            },
            {
              "type": "info",
              "message": "Database seeded successfully",
              "timestamp": "2025-09-22T15:42:30.519Z"
            },
            {
              "type": "info",
              "message": "Test script generated",
              "timestamp": "2025-09-22T15:42:30.520Z"
            },
            {
              "type": "info",
              "message": "Test passed - results match expected output",
              "timestamp": "2025-09-22T15:42:30.675Z"
            }
          ],
          "skip": true
        }
      },
      {
        "id": "switching-schemas-per-query",
        "name": "Switching schemas per query",
        "code": "```ts\nconst { data, error } = await supabase\n  .schema('myschema')\n  .from('mytable')\n  .select()\n```\n",
        "data": {
          "sql": "```sql\ncreate schema myschema;\n\ncreate table myschema.mytable (\n  id uuid primary key default gen_random_uuid(),\n  data text\n);\n\ninsert into myschema.mytable (data) values ('mydata');\n```\n"
        },
        "response": "```json\n{\n  \"data\": [\n    {\n      \"id\": \"4162e008-27b0-4c0f-82dc-ccaeee9a624d\",\n      \"data\": \"mydata\"\n    }\n  ],\n  \"status\": 200,\n  \"statusText\": \"OK\"\n}\n```\n",
        "description": "In addition to setting the schema during initialization, you can also switch schemas on a per-query basis.\nMake sure you've set up your [database privileges and API settings](/docs/guides/api/using-custom-schemas).\n",
        "hideCodeBlock": true,
        "results": {
          "passed": false,
          "log": [
            {
              "type": "info",
              "message": "Starting test: Switching schemas per query",
              "timestamp": "2025-09-10T13:55:24.727Z"
            },
            {
              "type": "info",
              "message": "Public schema reset for test isolation",
              "timestamp": "2025-09-10T13:55:24.833Z"
            },
            {
              "type": "info",
              "message": "Database seeded successfully",
              "timestamp": "2025-09-10T13:55:24.873Z"
            },
            {
              "type": "info",
              "message": "Test script generated",
              "timestamp": "2025-09-10T13:55:24.875Z"
            },
            {
              "type": "error",
              "message": "Test failed - results don't match:\nExpected:\n{\n  \"data\": [\n    {\n      \"id\": \"4162e008-27b0-4c0f-82dc-ccaeee9a624d\",\n      \"data\": \"mydata\"\n    }\n  ],\n  \"status\": 200,\n  \"statusText\": \"OK\"\n}\n\nActual:\n{\n  \"data\": [\n    {\n      \"id\": \"9427eeb5-9a43-4bc1-a0c6-9932542f273d\",\n      \"data\": \"mydata\"\n    }\n  ],\n  \"status\": 200,\n  \"statusText\": \"OK\"\n}",
              "timestamp": "2025-09-10T13:55:24.937Z"
            }
          ],
          "skip": true
        }
      }
    ]
  },
  {
    "id": "insert",
    "title": "Create data: insert()",
    "$ref": "@supabase/postgrest-js.PostgrestQueryBuilder.insert",
    "examples": [
      {
        "id": "create-a-record",
        "name": "Create a record",
        "code": "```ts\nconst { error } = await supabase\n  .from('countries')\n  .insert({ id: 1, name: 'Mordor' })\n```\n",
        "data": {
          "sql": "```sql\nCREATE TABLE\n  countries (id int8 primary key, name text);\n```\n"
        },
        "response": "```json\n{\n  \"status\": 201,\n  \"statusText\": \"Created\"\n}\n```\n",
        "hideCodeBlock": true,
        "isSpotlight": true,
        "results": {
          "passed": true,
          "log": [
            {
              "type": "info",
              "message": "Starting test: Create a record",
              "timestamp": "2025-09-22T15:42:30.778Z"
            },
            {
              "type": "info",
              "message": "Public schema reset for test isolation",
              "timestamp": "2025-09-22T15:42:30.945Z"
            },
            {
              "type": "info",
              "message": "Database seeded successfully",
              "timestamp": "2025-09-22T15:42:30.949Z"
            },
            {
              "type": "info",
              "message": "Test script generated",
              "timestamp": "2025-09-22T15:42:30.950Z"
            },
            {
              "type": "info",
              "message": "Test passed - results match expected output",
              "timestamp": "2025-09-22T15:42:31.120Z"
            }
          ],
          "skip": true
        }
      },
      {
        "id": "create-a-record-and-return-it",
        "name": "Create a record and return it",
        "code": "```ts\nconst { data, error } = await supabase\n  .from('countries')\n  .insert({ id: 1, name: 'Mordor' })\n  .select()\n```\n",
        "data": {
          "sql": "```sql\nCREATE TABLE\n  countries (id int8 primary key, name text);\n```\n"
        },
        "response": "```json\n{\n  \"data\": [\n    {\n      \"id\": 1,\n      \"name\": \"Mordor\"\n    }\n  ],\n  \"status\": 201,\n  \"statusText\": \"Created\"\n}\n```\n",
        "hideCodeBlock": true,
        "results": {
          "passed": true,
          "log": [
            {
              "type": "info",
              "message": "Starting test: Create a record and return it",
              "timestamp": "2025-09-22T15:42:31.223Z"
            },
            {
              "type": "info",
              "message": "Public schema reset for test isolation",
              "timestamp": "2025-09-22T15:42:31.389Z"
            },
            {
              "type": "info",
              "message": "Database seeded successfully",
              "timestamp": "2025-09-22T15:42:31.395Z"
            },
            {
              "type": "info",
              "message": "Test script generated",
              "timestamp": "2025-09-22T15:42:31.396Z"
            },
            {
              "type": "info",
              "message": "Test passed - results match expected output",
              "timestamp": "2025-09-22T15:42:31.528Z"
            }
          ],
          "skip": true
        }
      },
      {
        "id": "bulk-create",
        "name": "Bulk create",
        "code": "```ts\nconst { error } = await supabase\n  .from('countries')\n  .insert([\n    { id: 1, name: 'Mordor' },\n    { id: 1, name: 'The Shire' },\n  ])\n```\n",
        "data": {
          "sql": "```sql\nCREATE TABLE\n  countries (id int8 primary key, name text);\n```\n"
        },
        "response": "```json\n{\n  \"error\": {\n    \"code\": \"23505\",\n    \"details\": \"Key (id)=(1) already exists.\",\n    \"hint\": null,\n    \"message\": \"duplicate key value violates unique constraint \\\"countries_pkey\\\"\"\n  },\n  \"status\": 409,\n  \"statusText\": \"Conflict\"\n}\n```\n",
        "description": "A bulk create operation is handled in a single transaction.\nIf any of the inserts fail, none of the rows are inserted.\n",
        "hideCodeBlock": true,
        "results": {
          "passed": true,
          "log": [
            {
              "type": "info",
              "message": "Starting test: Bulk create",
              "timestamp": "2025-09-22T15:42:31.631Z"
            },
            {
              "type": "info",
              "message": "Public schema reset for test isolation",
              "timestamp": "2025-09-22T15:42:31.794Z"
            },
            {
              "type": "info",
              "message": "Database seeded successfully",
              "timestamp": "2025-09-22T15:42:31.800Z"
            },
            {
              "type": "info",
              "message": "Test script generated",
              "timestamp": "2025-09-22T15:42:31.802Z"
            },
            {
              "type": "info",
              "message": "Test passed - results match expected output",
              "timestamp": "2025-09-22T15:42:31.948Z"
            }
          ],
          "skip": true
        }
      }
    ]
  },
  {
    "id": "update",
    "title": "Modify data: update()",
    "$ref": "@supabase/postgrest-js.PostgrestQueryBuilder.update",
    "notes": "- `update()` should always be combined with [Filters](/docs/reference/javascript/using-filters) to target the item(s) you wish to update.\n",
    "examples": [
      {
        "id": "updating-your-data",
        "name": "Updating your data",
        "code": "```ts\nconst { error } = await supabase\n  .from('instruments')\n  .update({ name: 'piano' })\n  .eq('id', 1)\n```\n",
        "data": {
          "sql": "```sql\nCREATE TABLE\n  instruments (id int8 primary key, name text);\n\nINSERT INTO\n  instruments (id, name)\nVALUES\n  (1, 'harpsichord');\n```\n"
        },
        "response": "```json\n{\n  \"status\": 204,\n  \"statusText\": \"No Content\"\n}\n```\n",
        "hideCodeBlock": true,
        "isSpotlight": true,
        "results": {
          "passed": true,
          "log": [
            {
              "type": "info",
              "message": "Starting test: Updating your data",
              "timestamp": "2025-09-22T15:42:33.815Z"
            },
            {
              "type": "info",
              "message": "Public schema reset for test isolation",
              "timestamp": "2025-09-22T15:42:33.974Z"
            },
            {
              "type": "info",
              "message": "Database seeded successfully",
              "timestamp": "2025-09-22T15:42:34.032Z"
            },
            {
              "type": "info",
              "message": "Test script generated",
              "timestamp": "2025-09-22T15:42:34.033Z"
            },
            {
              "type": "info",
              "message": "Test passed - results match expected output",
              "timestamp": "2025-09-22T15:42:40.137Z"
            }
          ],
          "skip": true
        }
      },
      {
        "id": "update-a-record-and-return-it",
        "name": "Update a record and return it",
        "code": "```ts\nconst { data, error } = await supabase\n  .from('instruments')\n  .update({ name: 'piano' })\n  .eq('id', 1)\n  .select()\n```\n",
        "data": {
          "sql": "```sql\nCREATE TABLE\n  instruments (id int8 primary key, name text);\n\nINSERT INTO\n  instruments (id, name)\nVALUES\n  (1, 'harpsichord');\n```\n"
        },
        "response": "```json\n{\n  \"data\": [\n    {\n      \"id\": 1,\n      \"name\": \"piano\"\n    }\n  ],\n  \"status\": 200,\n  \"statusText\": \"OK\"\n}\n```\n",
        "hideCodeBlock": true,
        "results": {
          "passed": true,
          "log": [
            {
              "type": "info",
              "message": "Starting test: Update a record and return it",
              "timestamp": "2025-09-22T15:42:40.244Z"
            },
            {
              "type": "info",
              "message": "Public schema reset for test isolation",
              "timestamp": "2025-09-22T15:42:40.426Z"
            },
            {
              "type": "info",
              "message": "Database seeded successfully",
              "timestamp": "2025-09-22T15:42:40.485Z"
            },
            {
              "type": "info",
              "message": "Test script generated",
              "timestamp": "2025-09-22T15:42:40.486Z"
            },
            {
              "type": "info",
              "message": "Test passed - results match expected output",
              "timestamp": "2025-09-22T15:42:40.624Z"
            }
          ],
          "skip": true
        }
      },
      {
        "id": "updating-json-data",
        "name": "Updating JSON data",
        "code": "```ts\nconst { data, error } = await supabase\n  .from('users')\n  .update({\n    address: {\n      street: 'Melrose Place',\n      postcode: 90210\n    }\n  })\n  .eq('address->postcode', 90210)\n  .select()\n```\n",
        "data": {
          "sql": "```sql\nCREATE TABLE\n  users (\n    id int8 primary key,\n    name text,\n    address jsonb\n  );\n\nINSERT INTO\n  users (id, name, address)\nVALUES\n  (1, 'Michael', '{ \"postcode\": 90210 }');\n```\n"
        },
        "response": "```json\n{\n  \"data\": [\n    {\n      \"id\": 1,\n      \"name\": \"Michael\",\n      \"address\": {\n        \"street\": \"Melrose Place\",\n        \"postcode\": 90210\n      }\n    }\n  ],\n  \"status\": 200,\n  \"statusText\": \"OK\"\n}\n```\n",
        "description": "Postgres offers some\n[operators](/docs/guides/database/json#query-the-jsonb-data) for\nworking with JSON data. Currently, it is only possible to update the entire JSON document.\n",
        "hideCodeBlock": true,
        "results": {
          "passed": true,
          "log": [
            {
              "type": "info",
              "message": "Starting test: Updating JSON data",
              "timestamp": "2025-09-22T15:42:40.727Z"
            },
            {
              "type": "info",
              "message": "Public schema reset for test isolation",
              "timestamp": "2025-09-22T15:42:40.890Z"
            },
            {
              "type": "info",
              "message": "Database seeded successfully",
              "timestamp": "2025-09-22T15:42:40.946Z"
            },
            {
              "type": "info",
              "message": "Test script generated",
              "timestamp": "2025-09-22T15:42:40.947Z"
            },
            {
              "type": "info",
              "message": "Test passed - results match expected output",
              "timestamp": "2025-09-22T15:42:41.083Z"
            }
          ],
          "skip": true
        }
      }
    ]
  },
  {
    "id": "upsert",
    "title": "Upsert data: upsert()",
    "$ref": "@supabase/postgrest-js.PostgrestQueryBuilder.upsert",
    "notes": "- Primary keys must be included in `values` to use upsert.\n",
    "examples": [
      {
        "id": "upsert-your-data",
        "name": "Upsert your data",
        "code": "```ts\nconst { data, error } = await supabase\n  .from('instruments')\n  .upsert({ id: 1, name: 'piano' })\n  .select()\n```\n",
        "data": {
          "sql": "```sql\nCREATE TABLE\n  instruments (id int8 primary key, name text);\n\nINSERT INTO\n  instruments (id, name)\nVALUES\n  (1, 'harpsichord');\n```\n"
        },
        "response": "```json\n{\n  \"data\": [\n    {\n      \"id\": 1,\n      \"name\": \"piano\"\n    }\n  ],\n  \"status\": 201,\n  \"statusText\": \"Created\"\n}\n```\n",
        "hideCodeBlock": true,
        "isSpotlight": true,
        "results": {
          "passed": true,
          "log": [
            {
              "type": "info",
              "message": "Starting test: Upsert your data",
              "timestamp": "2025-09-22T15:42:41.186Z"
            },
            {
              "type": "info",
              "message": "Public schema reset for test isolation",
              "timestamp": "2025-09-22T15:42:41.349Z"
            },
            {
              "type": "info",
              "message": "Database seeded successfully",
              "timestamp": "2025-09-22T15:42:41.418Z"
            },
            {
              "type": "info",
              "message": "Test script generated",
              "timestamp": "2025-09-22T15:42:41.426Z"
            },
            {
              "type": "info",
              "message": "Test passed - results match expected output",
              "timestamp": "2025-09-22T15:42:41.568Z"
            }
          ],
          "skip": true
        }
      },
      {
        "id": "bulk-upsert-your-data",
        "name": "Bulk Upsert your data",
        "code": "```ts\nconst { data, error } = await supabase\n  .from('instruments')\n  .upsert([\n    { id: 1, name: 'piano' },\n    { id: 2, name: 'harp' },\n  ])\n  .select()\n```\n",
        "data": {
          "sql": "```sql\nCREATE TABLE\n  instruments (id int8 primary key, name text);\n\nINSERT INTO\n  instruments (id, name)\nVALUES\n  (1, 'harpsichord');\n```\n"
        },
        "response": "```json\n{\n  \"data\": [\n    {\n      \"id\": 1,\n      \"name\": \"piano\"\n    },\n    {\n      \"id\": 2,\n      \"name\": \"harp\"\n    }\n  ],\n  \"status\": 201,\n  \"statusText\": \"Created\"\n}\n```\n",
        "hideCodeBlock": true,
        "results": {
          "passed": true,
          "log": [
            {
              "type": "info",
              "message": "Starting test: Bulk Upsert your data",
              "timestamp": "2025-09-22T15:42:41.670Z"
            },
            {
              "type": "info",
              "message": "Public schema reset for test isolation",
              "timestamp": "2025-09-22T15:42:41.838Z"
            },
            {
              "type": "info",
              "message": "Database seeded successfully",
              "timestamp": "2025-09-22T15:42:41.895Z"
            },
            {
              "type": "info",
              "message": "Test script generated",
              "timestamp": "2025-09-22T15:42:41.896Z"
            },
            {
              "type": "info",
              "message": "Test passed - results match expected output",
              "timestamp": "2025-09-22T15:42:42.040Z"
            }
          ],
          "skip": true
        }
      },
      {
        "id": "upserting-into-tables-with-constraints",
        "name": "Upserting into tables with constraints",
        "code": "```ts\nconst { data, error } = await supabase\n  .from('users')\n  .upsert({ id: 42, handle: 'saoirse', display_name: 'Saoirse' }, { onConflict: 'handle' })\n  .select()\n```\n",
        "data": {
          "sql": "```sql\nCREATE TABLE\n  users (\n    id int8 generated by default as identity primary key,\n    handle text not null unique,\n    display_name text\n  );\n\nINSERT INTO\n  users (id, handle, display_name)\nVALUES\n  (1, 'saoirse', null);\n```\n"
        },
        "response": "```json\n{\n  \"error\": {\n    \"code\": \"23505\",\n    \"details\": \"Key (handle)=(saoirse) already exists.\",\n    \"hint\": null,\n    \"message\": \"duplicate key value violates unique constraint \\\"users_handle_key\\\"\"\n  },\n  \"status\": 409,\n  \"statusText\": \"Conflict\"\n}\n```\n",
        "description": "In the following query, `upsert()` implicitly uses the `id`\n(primary key) column to determine conflicts. If there is no existing\nrow with the same `id`, `upsert()` inserts a new row, which\nwill fail in this case as there is already a row with `handle` `\"saoirse\"`.\nUsing the `onConflict` option, you can instruct `upsert()` to use\nanother column with a unique constraint to determine conflicts.\n",
        "hideCodeBlock": true,
        "results": {
          "passed": true,
          "log": [
            {
              "type": "info",
              "message": "Starting test: Upserting into tables with constraints",
              "timestamp": "2025-09-22T15:42:43.926Z"
            },
            {
              "type": "info",
              "message": "Public schema reset for test isolation",
              "timestamp": "2025-09-22T15:42:44.083Z"
            },
            {
              "type": "info",
              "message": "Database seeded successfully",
              "timestamp": "2025-09-22T15:42:44.141Z"
            },
            {
              "type": "info",
              "message": "Test script generated",
              "timestamp": "2025-09-22T15:42:44.142Z"
            },
            {
              "type": "info",
              "message": "Test passed - results match expected output",
              "timestamp": "2025-09-22T15:42:44.280Z"
            }
          ],
          "skip": true
        }
      }
    ]
  },
  {
    "id": "delete",
    "title": "Delete data: delete()",
    "$ref": "@supabase/postgrest-js.PostgrestQueryBuilder.delete",
    "notes": "- `delete()` should always be combined with [filters](/docs/reference/javascript/using-filters) to target the item(s) you wish to delete.\n- If you use `delete()` with filters and you have\n  [RLS](/docs/learn/auth-deep-dive/auth-row-level-security) enabled, only\n  rows visible through `SELECT` policies are deleted. Note that by default\n  no rows are visible, so you need at least one `SELECT`/`ALL` policy that\n  makes the rows visible.\n- When using `delete().in()`, specify an array of values to target multiple rows with a single query. This is particularly useful for batch deleting entries that share common criteria, such as deleting users by their IDs. Ensure that the array you provide accurately represents all records you intend to delete to avoid unintended data removal.\n",
    "examples": [
      {
        "id": "delete-records",
        "name": "Delete a single record",
        "code": "```ts\nconst response = await supabase\n  .from('countries')\n  .delete()\n  .eq('id', 1)\n```\n",
        "data": {
          "sql": "```sql\nCREATE TABLE\n  countries (id int8 primary key, name text);\n\nINSERT INTO\n  countries (id, name)\nVALUES\n  (1, 'Mordor');\n```\n"
        },
        "response": "```json\n{\n  \"status\": 204,\n  \"statusText\": \"No Content\"\n}\n```\n",
        "hideCodeBlock": true,
        "isSpotlight": true,
        "results": {
          "passed": true,
          "log": [
            {
              "type": "info",
              "message": "Starting test: Delete a single record",
              "timestamp": "2025-09-22T15:42:44.382Z"
            },
            {
              "type": "info",
              "message": "Public schema reset for test isolation",
              "timestamp": "2025-09-22T15:42:44.547Z"
            },
            {
              "type": "info",
              "message": "Database seeded successfully",
              "timestamp": "2025-09-22T15:42:44.605Z"
            },
            {
              "type": "info",
              "message": "Test script generated",
              "timestamp": "2025-09-22T15:42:44.606Z"
            },
            {
              "type": "info",
              "message": "Test passed - results match expected output",
              "timestamp": "2025-09-22T15:42:50.706Z"
            }
          ],
          "skip": true
        }
      },
      {
        "id": "delete-records-and-return-it",
        "name": "Delete a record and return it",
        "code": "```ts\nconst { data, error } = await supabase\n  .from('countries')\n  .delete()\n  .eq('id', 1)\n  .select()\n```\n",
        "data": {
          "sql": "```sql\nCREATE TABLE\n  countries (id int8 primary key, name text);\n\nINSERT INTO\n  countries (id, name)\nVALUES\n  (1, 'Mordor');\n```\n"
        },
        "response": "```json\n{\n  \"data\": [\n    {\n      \"id\": 1,\n      \"name\": \"Mordor\"\n    }\n  ],\n  \"status\": 200,\n  \"statusText\": \"OK\"\n}\n```\n",
        "hideCodeBlock": true,
        "results": {
          "passed": true,
          "log": [
            {
              "type": "info",
              "message": "Starting test: Delete a record and return it",
              "timestamp": "2025-09-22T15:42:50.813Z"
            },
            {
              "type": "info",
              "message": "Public schema reset for test isolation",
              "timestamp": "2025-09-22T15:42:50.995Z"
            },
            {
              "type": "info",
              "message": "Database seeded successfully",
              "timestamp": "2025-09-22T15:42:51.053Z"
            },
            {
              "type": "info",
              "message": "Test script generated",
              "timestamp": "2025-09-22T15:42:51.055Z"
            },
            {
              "type": "info",
              "message": "Test passed - results match expected output",
              "timestamp": "2025-09-22T15:42:51.189Z"
            }
          ],
          "skip": true
        }
      },
      {
        "id": "delete-multiple-records",
        "name": "Delete multiple records",
        "code": "```ts\nconst response = await supabase\n  .from('countries')\n  .delete()\n  .in('id', [1, 2, 3])\n```\n",
        "data": {
          "sql": "```sql\nCREATE TABLE\n  countries (id int8 primary key, name text);\n\nINSERT INTO\n  countries (id, name)\nVALUES\n  (1, 'Rohan'), (2, 'The Shire'), (3, 'Mordor');\n```\n"
        },
        "response": "```json\n{\n  \"status\": 204,\n  \"statusText\": \"No Content\"\n}\n```\n",
        "hideCodeBlock": true,
        "results": {
          "passed": true,
          "log": [
            {
              "type": "info",
              "message": "Starting test: Delete multiple records",
              "timestamp": "2025-09-22T15:42:51.291Z"
            },
            {
              "type": "info",
              "message": "Public schema reset for test isolation",
              "timestamp": "2025-09-22T15:42:51.457Z"
            },
            {
              "type": "info",
              "message": "Database seeded successfully",
              "timestamp": "2025-09-22T15:42:51.515Z"
            },
            {
              "type": "info",
              "message": "Test script generated",
              "timestamp": "2025-09-22T15:42:51.516Z"
            },
            {
              "type": "info",
              "message": "Test passed - results match expected output",
              "timestamp": "2025-09-22T15:42:57.623Z"
            }
          ],
          "skip": true
        }
      }
    ]
  },
  {
    "id": "rpc",
    "title": "Postgres functions: rpc()",
    "description": "You can call Postgres functions as _Remote Procedure Calls_, logic in your database that you can execute from anywhere.\nFunctions are useful when the logic rarely changes—like for password resets and updates.\n\n```sql\nCREATE OR REPLACE FUNCTION hello_world() RETURNS text LANGUAGE sql AS\n'SELECT ''Hello world''';\n```\n\nTo call Postgres functions on [Read Replicas](/docs/guides/platform/read-replicas), use the `get: true` option.\n",
    "$ref": "@supabase/postgrest-js.PostgrestClient.rpc",
    "examples": [
      {
        "id": "call-a-postgres-function-without-arguments",
        "name": "Call a Postgres function without arguments",
        "code": "```ts\nconst { data, error } = await supabase.rpc('hello_world')\n```\n",
        "data": {
          "sql": "```sql\nCREATE OR REPLACE FUNCTION hello_world() RETURNS text LANGUAGE sql AS\n'SELECT ''Hello world''';\n```\n"
        },
        "response": "```json\n{\n  \"data\": \"Hello world\",\n  \"status\": 200,\n  \"statusText\": \"OK\"\n}\n```\n",
        "hideCodeBlock": true,
        "isSpotlight": true,
        "results": {
          "passed": true,
          "log": [
            {
              "type": "info",
              "message": "Starting test: Call a Postgres function without arguments",
              "timestamp": "2025-09-22T15:42:57.729Z"
            },
            {
              "type": "info",
              "message": "Public schema reset for test isolation",
              "timestamp": "2025-09-22T15:42:57.911Z"
            },
            {
              "type": "info",
              "message": "Database seeded successfully",
              "timestamp": "2025-09-22T15:42:57.915Z"
            },
            {
              "type": "info",
              "message": "Test script generated",
              "timestamp": "2025-09-22T15:42:57.916Z"
            },
            {
              "type": "info",
              "message": "Test passed - results match expected output",
              "timestamp": "2025-09-22T15:42:58.134Z"
            }
          ],
          "skip": true
        }
      },
      {
        "id": "call-a-postgres-function-with-arguments",
        "name": "Call a Postgres function with arguments",
        "code": "```ts\nconst { data, error } = await supabase.rpc('echo', { say: '👋' })\n```\n",
        "data": {
          "sql": "```sql\nCREATE OR REPLACE FUNCTION echo(say text) RETURNS text LANGUAGE sql AS\n'SELECT say';\n```\n"
        },
        "response": "```json\n  {\n    \"data\": \"👋\",\n    \"status\": 200,\n    \"statusText\": \"OK\"\n  }\n  ```\n",
        "hideCodeBlock": true,
        "results": {
          "passed": true,
          "log": [
            {
              "type": "info",
              "message": "Starting test: Call a Postgres function with arguments",
              "timestamp": "2025-09-22T15:43:00.002Z"
            },
            {
              "type": "info",
              "message": "Public schema reset for test isolation",
              "timestamp": "2025-09-22T15:43:00.160Z"
            },
            {
              "type": "info",
              "message": "Database seeded successfully",
              "timestamp": "2025-09-22T15:43:00.165Z"
            },
            {
              "type": "info",
              "message": "Test script generated",
              "timestamp": "2025-09-22T15:43:00.166Z"
            },
            {
              "type": "info",
              "message": "Test passed - results match expected output",
              "timestamp": "2025-09-22T15:43:00.302Z"
            }
          ],
          "skip": true
        }
      },
      {
        "id": "bulk-processing",
        "name": "Bulk processing",
        "code": "```ts\nconst { data, error } = await supabase.rpc('add_one_each', { arr: [1, 2, 3] })\n```\n",
        "data": {
          "sql": "```sql\nCREATE OR REPLACE FUNCTION add_one_each(arr int[]) RETURNS int[] LANGUAGE sql AS\n'SELECT array_agg(n + 1) FROM unnest(arr) AS n';\n```\n"
        },
        "response": "```json\n{\n  \"data\": [\n    2,\n    3,\n    4\n  ],\n  \"status\": 200,\n  \"statusText\": \"OK\"\n}\n```\n",
        "description": "You can process large payloads by passing in an array as an argument.\n",
        "hideCodeBlock": true,
        "results": {
          "passed": true,
          "log": [
            {
              "type": "info",
              "message": "Starting test: Bulk processing",
              "timestamp": "2025-09-22T15:43:00.405Z"
            },
            {
              "type": "info",
              "message": "Public schema reset for test isolation",
              "timestamp": "2025-09-22T15:43:00.568Z"
            },
            {
              "type": "info",
              "message": "Database seeded successfully",
              "timestamp": "2025-09-22T15:43:00.572Z"
            },
            {
              "type": "info",
              "message": "Test script generated",
              "timestamp": "2025-09-22T15:43:00.572Z"
            },
            {
              "type": "info",
              "message": "Test passed - results match expected output",
              "timestamp": "2025-09-22T15:43:00.710Z"
            }
          ],
          "skip": true
        }
      },
      {
        "id": "call-a-postgres-function-with-filters",
        "name": "Call a Postgres function with filters",
        "code": "```ts\nconst { data, error } = await supabase\n  .rpc('list_stored_countries')\n  .eq('id', 1)\n  .single()\n```\n",
        "data": {
          "sql": "```sql\nCREATE TABLE\n  countries (id int8 primary key, name text);\n\nINSERT INTO\n  countries (id, name)\nVALUES\n  (1, 'Rohan'),\n  (2, 'The Shire');\n\nCREATE OR REPLACE FUNCTION list_stored_countries() RETURNS SETOF countries LANGUAGE sql AS\n'SELECT * FROM countries';\n```\n"
        },
        "response": "```json\n{\n  \"data\": {\n    \"id\": 1,\n    \"name\": \"Rohan\"\n  },\n  \"status\": 200,\n  \"statusText\": \"OK\"\n}\n```\n",
        "description": "Postgres functions that return tables can also be combined with [Filters](/docs/reference/javascript/using-filters) and [Modifiers](/docs/reference/javascript/using-modifiers).\n",
        "hideCodeBlock": true,
        "results": {
          "passed": true,
          "log": [
            {
              "type": "info",
              "message": "Starting test: Call a Postgres function with filters",
              "timestamp": "2025-09-22T15:43:00.813Z"
            },
            {
              "type": "info",
              "message": "Public schema reset for test isolation",
              "timestamp": "2025-09-22T15:43:00.976Z"
            },
            {
              "type": "info",
              "message": "Database seeded successfully",
              "timestamp": "2025-09-22T15:43:01.094Z"
            },
            {
              "type": "info",
              "message": "Test script generated",
              "timestamp": "2025-09-22T15:43:01.102Z"
            },
            {
              "type": "info",
              "message": "Test passed - results match expected output",
              "timestamp": "2025-09-22T15:43:01.292Z"
            }
          ],
          "skip": true
        }
      },
      {
        "id": "call-a-read-only-postgres-function",
        "name": "Call a read-only Postgres function",
        "code": "```ts\nconst { data, error } = await supabase.rpc('hello_world', undefined, { get: true })\n```\n",
        "data": {
          "sql": "```sql\nCREATE OR REPLACE FUNCTION hello_world() RETURNS text LANGUAGE sql AS\n'SELECT ''Hello world''';\n```\n"
        },
        "response": "```json\n{\n  \"data\": \"Hello world\",\n  \"status\": 200,\n  \"statusText\": \"OK\"\n}\n```\n",
        "hideCodeBlock": true,
        "results": {
          "passed": true,
          "log": [
            {
              "type": "info",
              "message": "Starting test: Call a read-only Postgres function",
              "timestamp": "2025-09-22T15:43:01.394Z"
            },
            {
              "type": "info",
              "message": "Public schema reset for test isolation",
              "timestamp": "2025-09-22T15:43:01.557Z"
            },
            {
              "type": "info",
              "message": "Database seeded successfully",
              "timestamp": "2025-09-22T15:43:01.561Z"
            },
            {
              "type": "info",
              "message": "Test script generated",
              "timestamp": "2025-09-22T15:43:01.562Z"
            },
            {
              "type": "info",
              "message": "Test passed - results match expected output",
              "timestamp": "2025-09-22T15:43:01.700Z"
            }
          ],
          "skip": true
        }
      }
    ]
  },
  {
    "id": "using-filters",
    "title": "Using Filters",
    "description": "Filters allow you to only return rows that match certain conditions.\n\nFilters can be used on `select()`, `update()`, `upsert()`, and `delete()` queries.\n\nIf a Postgres function returns a table response, you can also apply filters.\n",
    "examples": [
      {
        "id": "applying-filters",
        "name": "Applying Filters",
        "description": "Filters must be applied after any of `select()`, `update()`, `upsert()`,\n`delete()`, and `rpc()` and before\n[modifiers](/docs/reference/javascript/using-modifiers).\n",
        "code": "```ts\nconst { data, error } = await supabase\n  .from('instruments')\n  .select('name, section_id')\n  .eq('name', 'violin')    // Correct\n\nconst { data, error } = await supabase\n  .from('instruments')\n  .eq('name', 'violin')    // Incorrect\n  .select('name, section_id')\n```\n",
        "data": {
          "sql": "```sql\nCREATE TABLE\n  orchestral_sections (id int8 primary key, name text);\nCREATE TABLE\n  instruments (\n    id int8 primary key,\n    section_id int8 not null references orchestral_sections,\n    name text\n  );\n\nINSERT INTO\n  orchestral_sections (id, name)\nVALUES\n  (1, 'strings'),\n  (2, 'woodwinds');\nINSERT INTO\n  instruments (id, section_id, name)\nVALUES\n  (1, 2, 'flute'),\n  (2, 1, 'violin');\n```\n"
        },
        "response": "```json\n{\n  \"error\": {\n    \"code\": \"UNKNOWN\",\n    \"details\": null,\n    \"hint\": null,\n    \"message\": \"supabase.from(...).eq is not a function\"\n  },\n  \"status\": 400,\n  \"statusText\": \"Bad Request\"\n}\n```\n",
        "results": {
          "passed": true,
          "log": [
            {
              "type": "info",
              "message": "Starting test: Applying Filters",
              "timestamp": "2025-09-22T15:43:01.802Z"
            },
            {
              "type": "info",
              "message": "Public schema reset for test isolation",
              "timestamp": "2025-09-22T15:43:01.965Z"
            },
            {
              "type": "info",
              "message": "Database seeded successfully",
              "timestamp": "2025-09-22T15:43:02.131Z"
            },
            {
              "type": "info",
              "message": "Test script generated",
              "timestamp": "2025-09-22T15:43:02.132Z"
            },
            {
              "type": "info",
              "message": "Test passed - results match expected output",
              "timestamp": "2025-09-22T15:43:02.201Z"
            }
          ],
          "skip": true
        }
      },
      {
        "id": "chaining-filters",
        "name": "Chaining",
        "description": "Filters can be chained together to produce advanced queries. For example,\nto query cities with population between 1,000 and 10,000:\n\n```ts\nconst { data, error } = await supabase\n  .from('cities')\n  .select('name, country_id')\n  .gte('population', 1000)\n  .lt('population', 10000)\n```\n",
        "code": "```ts\nconst { data, error } = await supabase\n  .from('cities')\n  .select('name, country_id')\n  .gte('population', 1000)\n  .lt('population', 10000)\n```\n",
        "data": {
          "sql": "```sql\nCREATE TABLE\n  cities (id int8 primary key, name text, country_id int8, population int8);\n\nINSERT INTO\n  cities (id, name, country_id, population)\nVALUES\n  (1, 'San Francisco', 1, 800000),\n  (2, 'New York', 1, 8000000),\n  (3, 'Paris', 2, 2000000),\n  (4, 'Berlin', 3, 3500000),\n  (5, 'Tokyo', 4, 9000000);\n```\n"
        },
        "response": "```json\n{\n  \"data\": [],\n  \"status\": 200,\n  \"statusText\": \"OK\"\n}\n```\n",
        "results": {
          "passed": true,
          "log": [
            {
              "type": "info",
              "message": "Starting test: Chaining",
              "timestamp": "2025-09-22T15:43:04.084Z"
            },
            {
              "type": "info",
              "message": "Public schema reset for test isolation",
              "timestamp": "2025-09-22T15:43:04.244Z"
            },
            {
              "type": "info",
              "message": "Database seeded successfully",
              "timestamp": "2025-09-22T15:43:04.301Z"
            },
            {
              "type": "info",
              "message": "Test script generated",
              "timestamp": "2025-09-22T15:43:04.302Z"
            },
            {
              "type": "info",
              "message": "Test passed - results match expected output",
              "timestamp": "2025-09-22T15:43:04.439Z"
            }
          ],
          "skip": true
        }
      },
      {
        "id": "conditional-chaining",
        "name": "Conditional Chaining",
        "description": "Filters can be built up one step at a time and then executed. For example:\n\n```ts\nconst filterByName = null\nconst filterPopLow = 1000\nconst filterPopHigh = 10000\n\nlet query = supabase\n  .from('cities')\n  .select('name, country_id')\n\nif (filterByName)  { query = query.eq('name', filterByName) }\nif (filterPopLow)  { query = query.gte('population', filterPopLow) }\nif (filterPopHigh) { query = query.lt('population', filterPopHigh) }\n\nconst { data, error } = await query\n```\n",
        "code": "```ts\nconst filterByName = null\nconst filterPopLow = 1000\nconst filterPopHigh = 10000\n\nlet query = supabase\n  .from('cities')\n  .select('name, country_id')\n\nif (filterByName)  { query = query.eq('name', filterByName) }\nif (filterPopLow)  { query = query.gte('population', filterPopLow) }\nif (filterPopHigh) { query = query.lt('population', filterPopHigh) }\n\nconst { data, error } = await query\n```\n",
        "data": {
          "sql": "```sql\nCREATE TABLE\n  cities (\n    id int8 primary key,\n    name text,\n    country_id int8,\n    population int8\n  );\n\nINSERT INTO\n  cities (id, name, country_id, population)\nVALUES\n  (1, 'Small Town', 1, 500),\n  (2, 'Medium City', 1, 2500),\n  (3, 'Big City', 1, 15000),\n  (4, 'Village', 1, 800),\n  (5, 'Growing Town', 1, 5500),\n  (6, 'Tiny Village', 1, 200),\n  (7, 'Mid Town', 1, 7500),\n  (8, 'Large City', 1, 25000),\n  (9, 'Small City', 1, 3200),\n  (10, 'Rural Town', 1, 1200);\n```\n"
        },
        "response": "```json\n{\n  \"data\": [\n    {\n      \"name\": \"Medium City\",\n      \"country_id\": 1\n    },\n    {\n      \"name\": \"Growing Town\",\n      \"country_id\": 1\n    },\n    {\n      \"name\": \"Mid Town\",\n      \"country_id\": 1\n    },\n    {\n      \"name\": \"Small City\",\n      \"country_id\": 1\n    },\n    {\n      \"name\": \"Rural Town\",\n      \"country_id\": 1\n    }\n  ],\n  \"status\": 200,\n  \"statusText\": \"OK\"\n}\n```\n",
        "results": {
          "passed": true,
          "log": [
            {
              "type": "info",
              "message": "Starting test: Conditional Chaining",
              "timestamp": "2025-09-22T15:43:04.541Z"
            },
            {
              "type": "info",
              "message": "Public schema reset for test isolation",
              "timestamp": "2025-09-22T15:43:04.707Z"
            },
            {
              "type": "info",
              "message": "Database seeded successfully",
              "timestamp": "2025-09-22T15:43:04.766Z"
            },
            {
              "type": "info",
              "message": "Test script generated",
              "timestamp": "2025-09-22T15:43:04.767Z"
            },
            {
              "type": "info",
              "message": "Test passed - results match expected output",
              "timestamp": "2025-09-22T15:43:04.898Z"
            }
          ],
          "skip": true
        }
      },
      {
        "id": "filter-by-value-within-json-column",
        "name": "Filter by values within a JSON column",
        "code": "```ts\nconst { data, error } = await supabase\n  .from('users')\n  .select()\n  .eq('address->postcode', 90210)\n```\n",
        "data": {
          "sql": "```sql\nCREATE TABLE\n  users (\n    id int8 primary key,\n    name text,\n    address jsonb\n  );\n\nINSERT INTO\n  users (id, name, address)\nVALUES\n  (1, 'Michael', '{ \"postcode\": 90210 }'),\n  (2, 'Jane', null);\n```\n"
        },
        "response": "```json\n{\n  \"data\": [\n    {\n      \"id\": 1,\n      \"name\": \"Michael\",\n      \"address\": {\n        \"postcode\": 90210\n      }\n    }\n  ],\n  \"status\": 200,\n  \"statusText\": \"OK\"\n}\n```\n",
        "results": {
          "passed": true,
          "log": [
            {
              "type": "info",
              "message": "Starting test: Filter by values within a JSON column",
              "timestamp": "2025-09-22T15:43:05.001Z"
            },
            {
              "type": "info",
              "message": "Public schema reset for test isolation",
              "timestamp": "2025-09-22T15:43:05.164Z"
            },
            {
              "type": "info",
              "message": "Database seeded successfully",
              "timestamp": "2025-09-22T15:43:05.223Z"
            },
            {
              "type": "info",
              "message": "Test script generated",
              "timestamp": "2025-09-22T15:43:05.224Z"
            },
            {
              "type": "info",
              "message": "Test passed - results match expected output",
              "timestamp": "2025-09-22T15:43:05.355Z"
            }
          ],
          "skip": true
        }
      },
      {
        "id": "filter-referenced-tables",
        "name": "Filter referenced tables",
        "code": "```ts\nconst { data, error } = await supabase\n  .from('orchestral_sections')\n  .select(`\n    name,\n    instruments!inner (\n      name\n    )\n  `)\n  .eq('instruments.name', 'flute')\n```\n",
        "data": {
          "sql": "```sql\nCREATE TABLE\n  orchestral_sections (id int8 primary key, name text);\nCREATE TABLE\n  instruments (\n    id int8 primary key,\n    section_id int8 not null references orchestral_sections,\n    name text\n  );\n\nINSERT INTO\n  orchestral_sections (id, name)\nVALUES\n  (1, 'strings'),\n  (2, 'woodwinds');\nINSERT INTO\n  instruments (id, section_id, name)\nVALUES\n  (1, 2, 'flute'),\n  (2, 1, 'violin');\n```\n"
        },
        "response": "```json\n{\n  \"data\": [\n    {\n      \"name\": \"woodwinds\",\n      \"instruments\": [\n        {\n          \"name\": \"flute\"\n        }\n      ]\n    }\n  ],\n  \"status\": 200,\n  \"statusText\": \"OK\"\n}\n```\n",
        "description": "You can filter on referenced tables in your `select()` query using dot\nnotation.\n",
        "results": {
          "passed": true,
          "log": [
            {
              "type": "info",
              "message": "Starting test: Filter referenced tables",
              "timestamp": "2025-09-22T15:43:05.458Z"
            },
            {
              "type": "info",
              "message": "Public schema reset for test isolation",
              "timestamp": "2025-09-22T15:43:05.627Z"
            },
            {
              "type": "info",
              "message": "Database seeded successfully",
              "timestamp": "2025-09-22T15:43:05.790Z"
            },
            {
              "type": "info",
              "message": "Test script generated",
              "timestamp": "2025-09-22T15:43:05.791Z"
            },
            {
              "type": "info",
              "message": "Test passed - results match expected output",
              "timestamp": "2025-09-22T15:43:05.943Z"
            }
          ],
          "skip": true
        }
      }
    ]
  },
  {
    "id": "eq",
    "title": "eq()",
    "$ref": "@supabase/postgrest-js.PostgrestFilterBuilder.eq",
    "examples": [
      {
        "id": "with-select",
        "name": "With `select()`",
        "code": "```ts\nconst { data, error } = await supabase\n  .from('characters')\n  .select()\n  .eq('name', 'Leia')\n```\n",
        "data": {
          "sql": "```sql\nCREATE TABLE\n  characters (id int8 primary key, name text);\n\nINSERT INTO\n  characters (id, name)\nVALUES\n  (1, 'Luke'),\n  (2, 'Leia'),\n  (3, 'Han');\n```\n"
        },
        "response": "```json\n{\n  \"data\": [\n    {\n      \"id\": 2,\n      \"name\": \"Leia\"\n    }\n  ],\n  \"status\": 200,\n  \"statusText\": \"OK\"\n}\n```\n",
        "hideCodeBlock": true,
        "isSpotlight": true,
        "results": {
          "passed": true,
          "log": [
            {
              "type": "info",
              "message": "Starting test: With `select()`",
              "timestamp": "2025-09-22T15:43:06.045Z"
            },
            {
              "type": "info",
              "message": "Public schema reset for test isolation",
              "timestamp": "2025-09-22T15:43:06.212Z"
            },
            {
              "type": "info",
              "message": "Database seeded successfully",
              "timestamp": "2025-09-22T15:43:06.270Z"
            },
            {
              "type": "info",
              "message": "Test script generated",
              "timestamp": "2025-09-22T15:43:06.271Z"
            },
            {
              "type": "info",
              "message": "Test passed - results match expected output",
              "timestamp": "2025-09-22T15:43:06.404Z"
            }
          ],
          "skip": true
        }
      }
    ]
  },
  {
    "id": "neq",
    "title": "neq()",
    "$ref": "@supabase/postgrest-js.PostgrestFilterBuilder.neq",
    "examples": [
      {
        "id": "with-select",
        "name": "With `select()`",
        "code": "```ts\nconst { data, error } = await supabase\n  .from('characters')\n  .select()\n  .neq('name', 'Leia')\n```\n",
        "data": {
          "sql": "```sql\nCREATE TABLE\n  characters (id int8 primary key, name text);\n\nINSERT INTO\n  characters (id, name)\nVALUES\n  (1, 'Luke'),\n  (2, 'Leia'),\n  (3, 'Han');\n```\n"
        },
        "response": "```json\n{\n  \"data\": [\n    {\n      \"id\": 1,\n      \"name\": \"Luke\"\n    },\n    {\n      \"id\": 3,\n      \"name\": \"Han\"\n    }\n  ],\n  \"status\": 200,\n  \"statusText\": \"OK\"\n}\n```\n",
        "hideCodeBlock": true,
        "isSpotlight": true,
        "results": {
          "passed": true,
          "log": [
            {
              "type": "info",
              "message": "Starting test: With `select()`",
              "timestamp": "2025-09-22T15:43:08.291Z"
            },
            {
              "type": "info",
              "message": "Public schema reset for test isolation",
              "timestamp": "2025-09-22T15:43:08.449Z"
            },
            {
              "type": "info",
              "message": "Database seeded successfully",
              "timestamp": "2025-09-22T15:43:08.508Z"
            },
            {
              "type": "info",
              "message": "Test script generated",
              "timestamp": "2025-09-22T15:43:08.509Z"
            },
            {
              "type": "info",
              "message": "Test passed - results match expected output",
              "timestamp": "2025-09-22T15:43:08.642Z"
            }
          ],
          "skip": true
        }
      }
    ]
  },
  {
    "id": "gt",
    "title": "gt()",
    "$ref": "@supabase/postgrest-js.PostgrestFilterBuilder.gt",
    "examples": [
      {
        "id": "with-select",
        "name": "With `select()`",
        "code": "```ts\nconst { data, error } = await supabase\n  .from('characters')\n  .select()\n  .gt('id', 2)\n```\n",
        "data": {
          "sql": "```sql\nCREATE TABLE\n  characters (id int8 primary key, name text);\n\nINSERT INTO\n  characters (id, name)\nVALUES\n  (1, 'Luke'),\n  (2, 'Leia'),\n  (3, 'Han');\n```\n"
        },
        "response": "```json\n{\n  \"data\": [\n    {\n      \"id\": 3,\n      \"name\": \"Han\"\n    }\n  ],\n  \"status\": 200,\n  \"statusText\": \"OK\"\n}\n```\n",
        "hideCodeBlock": true,
        "isSpotlight": true,
        "description": "When using [reserved words](https://www.postgresql.org/docs/current/sql-keywords-appendix.html) for column names you need\nto add double quotes e.g. `.gt('\"order\"', 2)`\n",
        "results": {
          "passed": true,
          "log": [
            {
              "type": "info",
              "message": "Starting test: With `select()`",
              "timestamp": "2025-09-22T15:43:08.745Z"
            },
            {
              "type": "info",
              "message": "Public schema reset for test isolation",
              "timestamp": "2025-09-22T15:43:08.910Z"
            },
            {
              "type": "info",
              "message": "Database seeded successfully",
              "timestamp": "2025-09-22T15:43:08.968Z"
            },
            {
              "type": "info",
              "message": "Test script generated",
              "timestamp": "2025-09-22T15:43:08.969Z"
            },
            {
              "type": "info",
              "message": "Test passed - results match expected output",
              "timestamp": "2025-09-22T15:43:09.108Z"
            }
          ],
          "skip": true
        }
      }
    ]
  },
  {
    "id": "gte",
    "title": "gte()",
    "$ref": "@supabase/postgrest-js.PostgrestFilterBuilder.gte",
    "examples": [
      {
        "id": "with-select",
        "name": "With `select()`",
        "code": "```ts\nconst { data, error } = await supabase\n  .from('characters')\n  .select()\n  .gte('id', 2)\n```\n",
        "data": {
          "sql": "```sql\nCREATE TABLE\n  characters (id int8 primary key, name text);\n\nINSERT INTO\n  characters (id, name)\nVALUES\n  (1, 'Luke'),\n  (2, 'Leia'),\n  (3, 'Han');\n```\n"
        },
        "response": "```json\n{\n  \"data\": [\n    {\n      \"id\": 2,\n      \"name\": \"Leia\"\n    },\n    {\n      \"id\": 3,\n      \"name\": \"Han\"\n    }\n  ],\n  \"status\": 200,\n  \"statusText\": \"OK\"\n}\n```\n",
        "hideCodeBlock": true,
        "isSpotlight": true,
        "results": {
          "passed": true,
          "log": [
            {
              "type": "info",
              "message": "Starting test: With `select()`",
              "timestamp": "2025-09-22T15:43:09.210Z"
            },
            {
              "type": "info",
              "message": "Public schema reset for test isolation",
              "timestamp": "2025-09-22T15:43:09.375Z"
            },
            {
              "type": "info",
              "message": "Database seeded successfully",
              "timestamp": "2025-09-22T15:43:09.434Z"
            },
            {
              "type": "info",
              "message": "Test script generated",
              "timestamp": "2025-09-22T15:43:09.451Z"
            },
            {
              "type": "info",
              "message": "Test passed - results match expected output",
              "timestamp": "2025-09-22T15:43:09.625Z"
            }
          ],
          "skip": true
        }
      }
    ]
  },
  {
    "id": "lt",
    "title": "lt()",
    "$ref": "@supabase/postgrest-js.PostgrestFilterBuilder.lt",
    "examples": [
      {
        "id": "with-select",
        "name": "With `select()`",
        "code": "```ts\nconst { data, error } = await supabase\n  .from('characters')\n  .select()\n  .lt('id', 2)\n```\n",
        "data": {
          "sql": "```sql\nCREATE TABLE\n  characters (id int8 primary key, name text);\n\nINSERT INTO\n  characters (id, name)\nVALUES\n  (1, 'Luke'),\n  (2, 'Leia'),\n  (3, 'Han');\n```\n"
        },
        "response": "```json\n{\n  \"data\": [\n    {\n      \"id\": 1,\n      \"name\": \"Luke\"\n    }\n  ],\n  \"status\": 200,\n  \"statusText\": \"OK\"\n}\n```\n",
        "hideCodeBlock": true,
        "isSpotlight": true,
        "results": {
          "passed": true,
          "log": [
            {
              "type": "info",
              "message": "Starting test: With `select()`",
              "timestamp": "2025-09-22T15:43:09.727Z"
            },
            {
              "type": "info",
              "message": "Public schema reset for test isolation",
              "timestamp": "2025-09-22T15:43:09.891Z"
            },
            {
              "type": "info",
              "message": "Database seeded successfully",
              "timestamp": "2025-09-22T15:43:09.949Z"
            },
            {
              "type": "info",
              "message": "Test script generated",
              "timestamp": "2025-09-22T15:43:09.950Z"
            },
            {
              "type": "info",
              "message": "Test passed - results match expected output",
              "timestamp": "2025-09-22T15:43:10.081Z"
            }
          ],
          "skip": true
        }
      }
    ]
  },
  {
    "id": "lte",
    "title": "lte()",
    "$ref": "@supabase/postgrest-js.PostgrestFilterBuilder.lte",
    "examples": [
      {
        "id": "with-select",
        "name": "With `select()`",
        "code": "```ts\nconst { data, error } = await supabase\n  .from('characters')\n  .select()\n  .lte('id', 2)\n```\n",
        "data": {
          "sql": "```sql\nCREATE TABLE\n  characters (id int8 primary key, name text);\n\nINSERT INTO\n  characters (id, name)\nVALUES\n  (1, 'Luke'),\n  (2, 'Leia'),\n  (3, 'Han');\n```\n"
        },
        "response": "```json\n{\n  \"data\": [\n    {\n      \"id\": 1,\n      \"name\": \"Luke\"\n    },\n    {\n      \"id\": 2,\n      \"name\": \"Leia\"\n    }\n  ],\n  \"status\": 200,\n  \"statusText\": \"OK\"\n}\n```\n",
        "hideCodeBlock": true,
        "isSpotlight": true,
        "results": {
          "passed": true,
          "log": [
            {
              "type": "info",
              "message": "Starting test: With `select()`",
              "timestamp": "2025-09-22T15:43:10.189Z"
            },
            {
              "type": "info",
              "message": "Public schema reset for test isolation",
              "timestamp": "2025-09-22T15:43:10.355Z"
            },
            {
              "type": "info",
              "message": "Database seeded successfully",
              "timestamp": "2025-09-22T15:43:10.414Z"
            },
            {
              "type": "info",
              "message": "Test script generated",
              "timestamp": "2025-09-22T15:43:10.415Z"
            },
            {
              "type": "info",
              "message": "Test passed - results match expected output",
              "timestamp": "2025-09-22T15:43:10.546Z"
            }
          ],
          "skip": true
        }
      }
    ]
  },
  {
    "id": "like",
    "title": "like()",
    "$ref": "@supabase/postgrest-js.PostgrestFilterBuilder.like",
    "examples": [
      {
        "id": "with-select",
        "name": "With `select()`",
        "code": "```ts\nconst { data, error } = await supabase\n  .from('characters')\n  .select()\n  .like('name', '%Lu%')\n```\n",
        "data": {
          "sql": "```sql\nCREATE TABLE\n  characters (id int8 primary key, name text);\n\nINSERT INTO\n  characters (id, name)\nVALUES\n  (1, 'Luke'),\n  (2, 'Leia'),\n  (3, 'Han');\n```\n"
        },
        "response": "```json\n{\n  \"data\": [\n    {\n      \"id\": 1,\n      \"name\": \"Luke\"\n    }\n  ],\n  \"status\": 200,\n  \"statusText\": \"OK\"\n}\n```\n",
        "hideCodeBlock": true,
        "isSpotlight": true,
        "results": {
          "passed": true,
          "log": [
            {
              "type": "info",
              "message": "Starting test: With `select()`",
              "timestamp": "2025-09-22T15:43:12.430Z"
            },
            {
              "type": "info",
              "message": "Public schema reset for test isolation",
              "timestamp": "2025-09-22T15:43:12.587Z"
            },
            {
              "type": "info",
              "message": "Database seeded successfully",
              "timestamp": "2025-09-22T15:43:12.644Z"
            },
            {
              "type": "info",
              "message": "Test script generated",
              "timestamp": "2025-09-22T15:43:12.645Z"
            },
            {
              "type": "info",
              "message": "Test passed - results match expected output",
              "timestamp": "2025-09-22T15:43:12.786Z"
            }
          ],
          "skip": true
        }
      }
    ]
  },
  {
    "id": "ilike",
    "title": "ilike()",
    "$ref": "@supabase/postgrest-js.PostgrestFilterBuilder.ilike",
    "examples": [
      {
        "id": "with-select",
        "name": "With `select()`",
        "code": "```ts\nconst { data, error } = await supabase\n  .from('characters')\n  .select()\n  .ilike('name', '%lu%')\n```\n",
        "data": {
          "sql": "```sql\nCREATE TABLE\n  characters (id int8 primary key, name text);\n\nINSERT INTO\n  characters (id, name)\nVALUES\n  (1, 'Luke'),\n  (2, 'Leia'),\n  (3, 'Han');\n```\n"
        },
        "response": "```json\n{\n  \"data\": [\n    {\n      \"id\": 1,\n      \"name\": \"Luke\"\n    }\n  ],\n  \"status\": 200,\n  \"statusText\": \"OK\"\n}\n```\n",
        "hideCodeBlock": true,
        "isSpotlight": true,
        "results": {
          "passed": true,
          "log": [
            {
              "type": "info",
              "message": "Starting test: With `select()`",
              "timestamp": "2025-09-22T15:43:12.888Z"
            },
            {
              "type": "info",
              "message": "Public schema reset for test isolation",
              "timestamp": "2025-09-22T15:43:13.051Z"
            },
            {
              "type": "info",
              "message": "Database seeded successfully",
              "timestamp": "2025-09-22T15:43:13.109Z"
            },
            {
              "type": "info",
              "message": "Test script generated",
              "timestamp": "2025-09-22T15:43:13.110Z"
            },
            {
              "type": "info",
              "message": "Test passed - results match expected output",
              "timestamp": "2025-09-22T15:43:13.242Z"
            }
          ],
          "skip": true
        }
      }
    ]
  },
  {
    "id": "is",
    "title": "is()",
    "$ref": "@supabase/postgrest-js.PostgrestFilterBuilder.is",
    "examples": [
      {
        "id": "checking-nullness",
        "name": "Checking for nullness, true or false",
        "code": "```ts\nconst { data, error } = await supabase\n  .from('countries')\n  .select()\n  .is('name', null)\n```\n",
        "data": {
          "sql": "```sql\nCREATE TABLE\n  countries (id int8 primary key, name text);\n\nINSERT INTO\n  countries (id, name)\nVALUES\n  (1, 'null'),\n  (2, null);\n```\n"
        },
        "response": "```json\n{\n  \"data\": [\n    {\n      \"id\": 2,\n      \"name\": null\n    }\n  ],\n  \"status\": 200,\n  \"statusText\": \"OK\"\n}\n```\n",
        "description": "Using the `eq()` filter doesn't work when filtering for `null`.\n\nInstead, you need to use `is()`.\n",
        "hideCodeBlock": true,
        "isSpotlight": true,
        "results": {
          "passed": true,
          "log": [
            {
              "type": "info",
              "message": "Starting test: Checking for nullness, true or false",
              "timestamp": "2025-09-22T15:43:13.344Z"
            },
            {
              "type": "info",
              "message": "Public schema reset for test isolation",
              "timestamp": "2025-09-22T15:43:13.508Z"
            },
            {
              "type": "info",
              "message": "Database seeded successfully",
              "timestamp": "2025-09-22T15:43:13.564Z"
            },
            {
              "type": "info",
              "message": "Test script generated",
              "timestamp": "2025-09-22T15:43:13.565Z"
            },
            {
              "type": "info",
              "message": "Test passed - results match expected output",
              "timestamp": "2025-09-22T15:43:13.702Z"
            }
          ],
          "skip": true
        }
      }
    ]
  },
  {
    "id": "in",
    "title": "in()",
    "$ref": "@supabase/postgrest-js.PostgrestFilterBuilder.in",
    "examples": [
      {
        "id": "with-select",
        "name": "With `select()`",
        "code": "```ts\nconst { data, error } = await supabase\n  .from('characters')\n  .select()\n  .in('name', ['Leia', 'Han'])\n```\n",
        "data": {
          "sql": "```sql\nCREATE TABLE\n  characters (id int8 primary key, name text);\n\nINSERT INTO\n  characters (id, name)\nVALUES\n  (1, 'Luke'),\n  (2, 'Leia'),\n  (3, 'Han');\n```\n"
        },
        "response": "```json\n{\n  \"data\": [\n    {\n      \"id\": 2,\n      \"name\": \"Leia\"\n    },\n    {\n      \"id\": 3,\n      \"name\": \"Han\"\n    }\n  ],\n  \"status\": 200,\n  \"statusText\": \"OK\"\n}\n```\n",
        "hideCodeBlock": true,
        "isSpotlight": true,
        "results": {
          "passed": true,
          "log": [
            {
              "type": "info",
              "message": "Starting test: With `select()`",
              "timestamp": "2025-09-22T15:43:13.803Z"
            },
            {
              "type": "info",
              "message": "Public schema reset for test isolation",
              "timestamp": "2025-09-22T15:43:13.967Z"
            },
            {
              "type": "info",
              "message": "Database seeded successfully",
              "timestamp": "2025-09-22T15:43:14.024Z"
            },
            {
              "type": "info",
              "message": "Test script generated",
              "timestamp": "2025-09-22T15:43:14.025Z"
            },
            {
              "type": "info",
              "message": "Test passed - results match expected output",
              "timestamp": "2025-09-22T15:43:14.155Z"
            }
          ],
          "skip": true
        }
      }
    ]
  },
  {
    "id": "contains",
    "title": "contains()",
    "$ref": "@supabase/postgrest-js.PostgrestFilterBuilder.contains",
    "examples": [
      {
        "id": "on-array-columns",
        "name": "On array columns",
        "code": "```ts\nconst { data, error } = await supabase\n  .from('issues')\n  .select()\n  .contains('tags', ['is:open', 'priority:low'])\n```\n",
        "data": {
          "sql": "```sql\nCREATE TABLE\n  issues (\n    id int8 primary key,\n    title text,\n    tags text[]\n  );\n\nINSERT INTO\n  issues (id, title, tags)\nVALUES\n  (1, 'Cache invalidation is not working', array['is:open', 'severity:high', 'priority:low']),\n  (2, 'Use better names', array['is:open', 'severity:low', 'priority:medium']);\n```\n"
        },
        "response": "```json\n{\n  \"data\": [\n    {\n      \"id\": 1,\n      \"title\": \"Cache invalidation is not working\",\n      \"tags\": [\n        \"is:open\",\n        \"severity:high\",\n        \"priority:low\"\n      ]\n    }\n  ],\n  \"status\": 200,\n  \"statusText\": \"OK\"\n}\n```\n",
        "hideCodeBlock": true,
        "isSpotlight": true,
        "results": {
          "passed": true,
          "log": [
            {
              "type": "info",
              "message": "Starting test: On array columns",
              "timestamp": "2025-09-22T15:43:14.257Z"
            },
            {
              "type": "info",
              "message": "Public schema reset for test isolation",
              "timestamp": "2025-09-22T15:43:14.421Z"
            },
            {
              "type": "info",
              "message": "Database seeded successfully",
              "timestamp": "2025-09-22T15:43:14.479Z"
            },
            {
              "type": "info",
              "message": "Test script generated",
              "timestamp": "2025-09-22T15:43:14.481Z"
            },
            {
              "type": "info",
              "message": "Test passed - results match expected output",
              "timestamp": "2025-09-22T15:43:14.618Z"
            }
          ],
          "skip": true
        }
      },
      {
        "id": "on-range-columns",
        "name": "On range columns",
        "code": "```ts\nconst { data, error } = await supabase\n  .from('reservations')\n  .select()\n  .contains('during', '[2000-01-01 13:00, 2000-01-01 13:30)')\n```\n",
        "data": {
          "sql": "```sql\nCREATE TABLE\n  reservations (\n    id int8 primary key,\n    room_name text,\n    during tsrange\n  );\n\nINSERT INTO\n  reservations (id, room_name, during)\nVALUES\n  (1, 'Emerald', '[2000-01-01 13:00, 2000-01-01 15:00)'),\n  (2, 'Topaz', '[2000-01-02 09:00, 2000-01-02 10:00)');\n```\n"
        },
        "response": "```json\n{\n  \"data\": [\n    {\n      \"id\": 1,\n      \"room_name\": \"Emerald\",\n      \"during\": \"[\\\"2000-01-01 13:00:00\\\",\\\"2000-01-01 15:00:00\\\")\"\n    }\n  ],\n  \"status\": 200,\n  \"statusText\": \"OK\"\n}\n```\n",
        "description": "Postgres supports a number of [range\ntypes](https://www.postgresql.org/docs/current/rangetypes.html). You\ncan filter on range columns using the string representation of range\nvalues.\n",
        "hideCodeBlock": true,
        "results": {
          "passed": true,
          "log": [
            {
              "type": "info",
              "message": "Starting test: On range columns",
              "timestamp": "2025-09-22T15:43:16.546Z"
            },
            {
              "type": "info",
              "message": "Public schema reset for test isolation",
              "timestamp": "2025-09-22T15:43:16.704Z"
            },
            {
              "type": "info",
              "message": "Database seeded successfully",
              "timestamp": "2025-09-22T15:43:16.762Z"
            },
            {
              "type": "info",
              "message": "Test script generated",
              "timestamp": "2025-09-22T15:43:16.763Z"
            },
            {
              "type": "info",
              "message": "Test passed - results match expected output",
              "timestamp": "2025-09-22T15:43:16.906Z"
            }
          ],
          "skip": true
        }
      },
      {
        "id": "on-jsonb-columns",
        "name": "On `jsonb` columns",
        "code": "```ts\nconst { data, error } = await supabase\n  .from('users')\n  .select('name')\n  .contains('address', { postcode: 90210 })\n```\n",
        "data": {
          "sql": "```sql\nCREATE TABLE\n  users (\n    id int8 primary key,\n    name text,\n    address jsonb\n  );\n\nINSERT INTO\n  users (id, name, address)\nVALUES\n  (1, 'Michael', '{ \"postcode\": 90210, \"street\": \"Melrose Place\" }'),\n  (2, 'Jane', '{}');\n```\n"
        },
        "response": "```json\n{\n  \"data\": [\n    {\n      \"name\": \"Michael\"\n    }\n  ],\n  \"status\": 200,\n  \"statusText\": \"OK\"\n}\n```\n",
        "hideCodeBlock": true,
        "results": {
          "passed": true,
          "log": [
            {
              "type": "info",
              "message": "Starting test: On `jsonb` columns",
              "timestamp": "2025-09-22T15:43:17.008Z"
            },
            {
              "type": "info",
              "message": "Public schema reset for test isolation",
              "timestamp": "2025-09-22T15:43:17.171Z"
            },
            {
              "type": "info",
              "message": "Database seeded successfully",
              "timestamp": "2025-09-22T15:43:17.229Z"
            },
            {
              "type": "info",
              "message": "Test script generated",
              "timestamp": "2025-09-22T15:43:17.230Z"
            },
            {
              "type": "info",
              "message": "Test passed - results match expected output",
              "timestamp": "2025-09-22T15:43:17.379Z"
            }
          ],
          "skip": true
        }
      }
    ]
  },
  {
    "id": "contained-by",
    "title": "containedBy()",
    "$ref": "@supabase/postgrest-js.PostgrestFilterBuilder.containedBy",
    "examples": [
      {
        "id": "on-array-columns",
        "name": "On array columns",
        "code": "```ts\nconst { data, error } = await supabase\n  .from('classes')\n  .select('name')\n  .containedBy('days', ['monday', 'tuesday', 'wednesday', 'friday'])\n```\n",
        "data": {
          "sql": "```sql\nCREATE TABLE\n  classes (\n    id int8 primary key,\n    name text,\n    days text[]\n  );\n\nINSERT INTO\n  classes (id, name, days)\nVALUES\n  (1, 'Chemistry', array['monday', 'friday']),\n  (2, 'History', array['monday', 'wednesday', 'thursday']);\n```\n"
        },
        "response": "```json\n{\n  \"data\": [\n    {\n      \"name\": \"Chemistry\"\n    }\n  ],\n  \"status\": 200,\n  \"statusText\": \"OK\"\n}\n```\n",
        "hideCodeBlock": true,
        "isSpotlight": true,
        "results": {
          "passed": true,
          "log": [
            {
              "type": "info",
              "message": "Starting test: On array columns",
              "timestamp": "2025-09-22T15:43:17.481Z"
            },
            {
              "type": "info",
              "message": "Public schema reset for test isolation",
              "timestamp": "2025-09-22T15:43:17.644Z"
            },
            {
              "type": "info",
              "message": "Database seeded successfully",
              "timestamp": "2025-09-22T15:43:17.702Z"
            },
            {
              "type": "info",
              "message": "Test script generated",
              "timestamp": "2025-09-22T15:43:17.703Z"
            },
            {
              "type": "info",
              "message": "Test passed - results match expected output",
              "timestamp": "2025-09-22T15:43:17.836Z"
            }
          ],
          "skip": true
        }
      },
      {
        "id": "on-range-columns",
        "name": "On range columns",
        "code": "```ts\nconst { data, error } = await supabase\n  .from('reservations')\n  .select()\n  .containedBy('during', '[2000-01-01 00:00, 2000-01-01 23:59)')\n```\n",
        "data": {
          "sql": "```sql\nCREATE TABLE\n  reservations (\n    id int8 primary key,\n    room_name text,\n    during tsrange\n  );\n\nINSERT INTO\n  reservations (id, room_name, during)\nVALUES\n  (1, 'Emerald', '[2000-01-01 13:00, 2000-01-01 15:00)'),\n  (2, 'Topaz', '[2000-01-02 09:00, 2000-01-02 10:00)');\n```\n"
        },
        "response": "```json\n{\n  \"data\": [\n    {\n      \"id\": 1,\n      \"room_name\": \"Emerald\",\n      \"during\": \"[\\\"2000-01-01 13:00:00\\\",\\\"2000-01-01 15:00:00\\\")\"\n    }\n  ],\n  \"status\": 200,\n  \"statusText\": \"OK\"\n}\n```\n",
        "description": "Postgres supports a number of [range\ntypes](https://www.postgresql.org/docs/current/rangetypes.html). You\ncan filter on range columns using the string representation of range\nvalues.\n",
        "hideCodeBlock": true,
        "results": {
          "passed": true,
          "log": [
            {
              "type": "info",
              "message": "Starting test: On range columns",
              "timestamp": "2025-09-22T15:43:17.938Z"
            },
            {
              "type": "info",
              "message": "Public schema reset for test isolation",
              "timestamp": "2025-09-22T15:43:18.104Z"
            },
            {
              "type": "info",
              "message": "Database seeded successfully",
              "timestamp": "2025-09-22T15:43:18.163Z"
            },
            {
              "type": "info",
              "message": "Test script generated",
              "timestamp": "2025-09-22T15:43:18.164Z"
            },
            {
              "type": "info",
              "message": "Test passed - results match expected output",
              "timestamp": "2025-09-22T15:43:18.298Z"
            }
          ],
          "skip": true
        }
      },
      {
        "id": "on-jsonb-columns",
        "name": "On `jsonb` columns",
        "code": "```ts\nconst { data, error } = await supabase\n  .from('users')\n  .select('name')\n  .containedBy('address', {})\n```\n",
        "data": {
          "sql": "```sql\nCREATE TABLE\n  users (\n    id int8 primary key,\n    name text,\n    address jsonb\n  );\n\nINSERT INTO\n  users (id, name, address)\nVALUES\n  (1, 'Michael', '{ \"postcode\": 90210, \"street\": \"Melrose Place\" }'),\n  (2, 'Jane', '{}');\n```\n"
        },
        "response": "```json\n  {\n    \"data\": [\n      {\n        \"name\": \"Jane\"\n      }\n    ],\n    \"status\": 200,\n    \"statusText\": \"OK\"\n  }\n  ```\n",
        "hideCodeBlock": true,
        "results": {
          "passed": true,
          "log": [
            {
              "type": "info",
              "message": "Starting test: On `jsonb` columns",
              "timestamp": "2025-09-22T15:43:18.400Z"
            },
            {
              "type": "info",
              "message": "Public schema reset for test isolation",
              "timestamp": "2025-09-22T15:43:18.567Z"
            },
            {
              "type": "info",
              "message": "Database seeded successfully",
              "timestamp": "2025-09-22T15:43:18.624Z"
            },
            {
              "type": "info",
              "message": "Test script generated",
              "timestamp": "2025-09-22T15:43:18.625Z"
            },
            {
              "type": "info",
              "message": "Test passed - results match expected output",
              "timestamp": "2025-09-22T15:43:18.760Z"
            }
          ],
          "skip": true
        }
      }
    ]
  },
  {
    "id": "range-gt",
    "title": "rangeGt()",
    "$ref": "@supabase/postgrest-js.PostgrestFilterBuilder.rangeGt",
    "examples": [
      {
        "id": "with-select",
        "name": "With `select()`",
        "code": "```ts\nconst { data, error } = await supabase\n  .from('reservations')\n  .select()\n  .rangeGt('during', '[2000-01-02 08:00, 2000-01-02 09:00)')\n```\n",
        "data": {
          "sql": "```sql\nCREATE TABLE\n  reservations (\n    id int8 primary key,\n    room_name text,\n    during tsrange\n  );\n\nINSERT INTO\n  reservations (id, room_name, during)\nVALUES\n  (1, 'Emerald', '[2000-01-01 13:00, 2000-01-01 15:00)'),\n  (2, 'Topaz', '[2000-01-02 09:00, 2000-01-02 10:00)');\n```\n"
        },
        "response": "```json\n  {\n    \"data\": [\n      {\n        \"id\": 2,\n        \"room_name\": \"Topaz\",\n        \"during\": \"[\\\"2000-01-02 09:00:00\\\",\\\"2000-01-02 10:00:00\\\")\"\n      }\n    ],\n    \"status\": 200,\n    \"statusText\": \"OK\"\n  }\n  ```\n",
        "description": "Postgres supports a number of [range\ntypes](https://www.postgresql.org/docs/current/rangetypes.html). You\ncan filter on range columns using the string representation of range\nvalues.\n",
        "hideCodeBlock": true,
        "isSpotlight": true,
        "results": {
          "passed": true,
          "log": [
            {
              "type": "info",
              "message": "Starting test: With `select()`",
              "timestamp": "2025-09-22T15:43:20.668Z"
            },
            {
              "type": "info",
              "message": "Public schema reset for test isolation",
              "timestamp": "2025-09-22T15:43:20.825Z"
            },
            {
              "type": "info",
              "message": "Database seeded successfully",
              "timestamp": "2025-09-22T15:43:20.883Z"
            },
            {
              "type": "info",
              "message": "Test script generated",
              "timestamp": "2025-09-22T15:43:20.885Z"
            },
            {
              "type": "info",
              "message": "Test passed - results match expected output",
              "timestamp": "2025-09-22T15:43:21.019Z"
            }
          ],
          "skip": true
        }
      }
    ]
  },
  {
    "id": "range-gte",
    "title": "rangeGte()",
    "$ref": "@supabase/postgrest-js.PostgrestFilterBuilder.rangeGte",
    "examples": [
      {
        "id": "with-select",
        "name": "With `select()`",
        "code": "```ts\nconst { data, error } = await supabase\n  .from('reservations')\n  .select()\n  .rangeGte('during', '[2000-01-02 08:30, 2000-01-02 09:30)')\n```\n",
        "data": {
          "sql": "```sql\nCREATE TABLE\n  reservations (\n    id int8 primary key,\n    room_name text,\n    during tsrange\n  );\n\nINSERT INTO\n  reservations (id, room_name, during)\nVALUES\n  (1, 'Emerald', '[2000-01-01 13:00, 2000-01-01 15:00)'),\n  (2, 'Topaz', '[2000-01-02 09:00, 2000-01-02 10:00)');\n```\n"
        },
        "response": "```json\n  {\n    \"data\": [\n      {\n        \"id\": 2,\n        \"room_name\": \"Topaz\",\n        \"during\": \"[\\\"2000-01-02 09:00:00\\\",\\\"2000-01-02 10:00:00\\\")\"\n      }\n    ],\n    \"status\": 200,\n    \"statusText\": \"OK\"\n  }\n  ```\n",
        "description": "Postgres supports a number of [range\ntypes](https://www.postgresql.org/docs/current/rangetypes.html). You\ncan filter on range columns using the string representation of range\nvalues.\n",
        "hideCodeBlock": true,
        "isSpotlight": true,
        "results": {
          "passed": true,
          "log": [
            {
              "type": "info",
              "message": "Starting test: With `select()`",
              "timestamp": "2025-09-22T15:43:21.121Z"
            },
            {
              "type": "info",
              "message": "Public schema reset for test isolation",
              "timestamp": "2025-09-22T15:43:21.285Z"
            },
            {
              "type": "info",
              "message": "Database seeded successfully",
              "timestamp": "2025-09-22T15:43:21.343Z"
            },
            {
              "type": "info",
              "message": "Test script generated",
              "timestamp": "2025-09-22T15:43:21.344Z"
            },
            {
              "type": "info",
              "message": "Test passed - results match expected output",
              "timestamp": "2025-09-22T15:43:21.476Z"
            }
          ],
          "skip": true
        }
      }
    ]
  },
  {
    "id": "range-lt",
    "title": "rangeLt()",
    "$ref": "@supabase/postgrest-js.PostgrestFilterBuilder.rangeLt",
    "examples": [
      {
        "id": "with-select",
        "name": "With `select()`",
        "code": "```ts\nconst { data, error } = await supabase\n  .from('reservations')\n  .select()\n  .rangeLt('during', '[2000-01-01 15:00, 2000-01-01 16:00)')\n```\n",
        "data": {
          "sql": "```sql\nCREATE TABLE\n  reservations (\n    id int8 primary key,\n    room_name text,\n    during tsrange\n  );\n\nINSERT INTO\n  reservations (id, room_name, during)\nVALUES\n  (1, 'Emerald', '[2000-01-01 13:00, 2000-01-01 15:00)'),\n  (2, 'Topaz', '[2000-01-02 09:00, 2000-01-02 10:00)');\n```\n"
        },
        "response": "```json\n{\n  \"data\": [\n    {\n      \"id\": 1,\n      \"room_name\": \"Emerald\",\n      \"during\": \"[\\\"2000-01-01 13:00:00\\\",\\\"2000-01-01 15:00:00\\\")\"\n    }\n  ],\n  \"status\": 200,\n  \"statusText\": \"OK\"\n}\n```\n",
        "description": "Postgres supports a number of [range\ntypes](https://www.postgresql.org/docs/current/rangetypes.html). You\ncan filter on range columns using the string representation of range\nvalues.\n",
        "hideCodeBlock": true,
        "isSpotlight": true,
        "results": {
          "passed": true,
          "log": [
            {
              "type": "info",
              "message": "Starting test: With `select()`",
              "timestamp": "2025-09-22T15:43:21.578Z"
            },
            {
              "type": "info",
              "message": "Public schema reset for test isolation",
              "timestamp": "2025-09-22T15:43:21.741Z"
            },
            {
              "type": "info",
              "message": "Database seeded successfully",
              "timestamp": "2025-09-22T15:43:21.798Z"
            },
            {
              "type": "info",
              "message": "Test script generated",
              "timestamp": "2025-09-22T15:43:21.799Z"
            },
            {
              "type": "info",
              "message": "Test passed - results match expected output",
              "timestamp": "2025-09-22T15:43:21.933Z"
            }
          ],
          "skip": true
        }
      }
    ]
  },
  {
    "id": "range-lte",
    "title": "rangeLte()",
    "$ref": "@supabase/postgrest-js.PostgrestFilterBuilder.rangeLte",
    "examples": [
      {
        "id": "with-select",
        "name": "With `select()`",
        "code": "```ts\nconst { data, error } = await supabase\n  .from('reservations')\n  .select()\n  .rangeLte('during', '[2000-01-01 14:00, 2000-01-01 16:00)')\n```\n",
        "data": {
          "sql": "```sql\nCREATE TABLE\n  reservations (\n    id int8 primary key,\n    room_name text,\n    during tsrange\n  );\n\nINSERT INTO\n  reservations (id, room_name, during)\nVALUES\n  (1, 'Emerald', '[2000-01-01 13:00, 2000-01-01 15:00)'),\n  (2, 'Topaz', '[2000-01-02 09:00, 2000-01-02 10:00)');\n```\n"
        },
        "response": "```json\n  {\n    \"data\": [\n      {\n        \"id\": 1,\n        \"room_name\": \"Emerald\",\n        \"during\": \"[\\\"2000-01-01 13:00:00\\\",\\\"2000-01-01 15:00:00\\\")\"\n      }\n    ],\n    \"status\": 200,\n    \"statusText\": \"OK\"\n  }\n  ```\n",
        "description": "Postgres supports a number of [range\ntypes](https://www.postgresql.org/docs/current/rangetypes.html). You\ncan filter on range columns using the string representation of range\nvalues.\n",
        "hideCodeBlock": true,
        "isSpotlight": true,
        "results": {
          "passed": true,
          "log": [
            {
              "type": "info",
              "message": "Starting test: With `select()`",
              "timestamp": "2025-09-22T15:43:22.036Z"
            },
            {
              "type": "info",
              "message": "Public schema reset for test isolation",
              "timestamp": "2025-09-22T15:43:22.204Z"
            },
            {
              "type": "info",
              "message": "Database seeded successfully",
              "timestamp": "2025-09-22T15:43:22.262Z"
            },
            {
              "type": "info",
              "message": "Test script generated",
              "timestamp": "2025-09-22T15:43:22.263Z"
            },
            {
              "type": "info",
              "message": "Test passed - results match expected output",
              "timestamp": "2025-09-22T15:43:22.397Z"
            }
          ],
          "skip": true
        }
      }
    ]
  },
  {
    "id": "range-adjacent",
    "title": "rangeAdjacent()",
    "$ref": "@supabase/postgrest-js.PostgrestFilterBuilder.rangeAdjacent",
    "examples": [
      {
        "id": "with-select",
        "name": "With `select()`",
        "code": "```ts\nconst { data, error } = await supabase\n  .from('reservations')\n  .select()\n  .rangeAdjacent('during', '[2000-01-01 12:00, 2000-01-01 13:00)')\n```\n",
        "data": {
          "sql": "```sql\nCREATE TABLE\n  reservations (\n    id int8 primary key,\n    room_name text,\n    during tsrange\n  );\n\nINSERT INTO\n  reservations (id, room_name, during)\nVALUES\n  (1, 'Emerald', '[2000-01-01 13:00, 2000-01-01 15:00)'),\n  (2, 'Topaz', '[2000-01-02 09:00, 2000-01-02 10:00)');\n```\n"
        },
        "response": "```json\n{\n  \"data\": [\n    {\n      \"id\": 1,\n      \"room_name\": \"Emerald\",\n      \"during\": \"[\\\"2000-01-01 13:00:00\\\",\\\"2000-01-01 15:00:00\\\")\"\n    }\n  ],\n  \"status\": 200,\n  \"statusText\": \"OK\"\n}\n```\n",
        "description": "Postgres supports a number of [range\ntypes](https://www.postgresql.org/docs/current/rangetypes.html). You\ncan filter on range columns using the string representation of range\nvalues.\n",
        "hideCodeBlock": true,
        "isSpotlight": true,
        "results": {
          "passed": true,
          "log": [
            {
              "type": "info",
              "message": "Starting test: With `select()`",
              "timestamp": "2025-09-22T15:43:22.499Z"
            },
            {
              "type": "info",
              "message": "Public schema reset for test isolation",
              "timestamp": "2025-09-22T15:43:22.662Z"
            },
            {
              "type": "info",
              "message": "Database seeded successfully",
              "timestamp": "2025-09-22T15:43:22.719Z"
            },
            {
              "type": "info",
              "message": "Test script generated",
              "timestamp": "2025-09-22T15:43:22.720Z"
            },
            {
              "type": "info",
              "message": "Test passed - results match expected output",
              "timestamp": "2025-09-22T15:43:22.851Z"
            }
          ],
          "skip": true
        }
      }
    ]
  },
  {
    "id": "overlaps",
    "title": "overlaps()",
    "$ref": "@supabase/postgrest-js.PostgrestFilterBuilder.overlaps",
    "examples": [
      {
        "id": "on-array-columns",
        "name": "On array columns",
        "code": "```ts\nconst { data, error } = await supabase\n  .from('issues')\n  .select('title')\n  .overlaps('tags', ['is:closed', 'severity:high'])\n```\n",
        "data": {
          "sql": "```sql\nCREATE TABLE\n  issues (\n    id int8 primary key,\n    title text,\n    tags text[]\n  );\n\nINSERT INTO\n  issues (id, title, tags)\nVALUES\n  (1, 'Cache invalidation is not working', array['is:open', 'severity:high', 'priority:low']),\n  (2, 'Use better names', array['is:open', 'severity:low', 'priority:medium']);\n```\n"
        },
        "response": "```json\n{\n  \"data\": [\n    {\n      \"title\": \"Cache invalidation is not working\"\n    }\n  ],\n  \"status\": 200,\n  \"statusText\": \"OK\"\n}\n```\n",
        "hideCodeBlock": true,
        "isSpotlight": true,
        "results": {
          "passed": true,
          "log": [
            {
              "type": "info",
              "message": "Starting test: On array columns",
              "timestamp": "2025-09-22T15:43:24.809Z"
            },
            {
              "type": "info",
              "message": "Public schema reset for test isolation",
              "timestamp": "2025-09-22T15:43:24.960Z"
            },
            {
              "type": "info",
              "message": "Database seeded successfully",
              "timestamp": "2025-09-22T15:43:25.017Z"
            },
            {
              "type": "info",
              "message": "Test script generated",
              "timestamp": "2025-09-22T15:43:25.018Z"
            },
            {
              "type": "info",
              "message": "Test passed - results match expected output",
              "timestamp": "2025-09-22T15:43:25.159Z"
            }
          ],
          "skip": true
        }
      },
      {
        "id": "on-range-columns",
        "name": "On range columns",
        "code": "```ts\nconst { data, error } = await supabase\n  .from('reservations')\n  .select()\n  .overlaps('during', '[2000-01-01 12:45, 2000-01-01 13:15)')\n```\n",
        "data": {
          "sql": "```sql\nCREATE TABLE\n  reservations (\n    id int8 primary key,\n    room_name text,\n    during tsrange\n  );\n\nINSERT INTO\n  reservations (id, room_name, during)\nVALUES\n  (1, 'Emerald', '[2000-01-01 13:00, 2000-01-01 15:00)'),\n  (2, 'Topaz', '[2000-01-02 09:00, 2000-01-02 10:00)');\n```\n"
        },
        "response": "```json\n{\n  \"data\": [\n    {\n      \"id\": 1,\n      \"room_name\": \"Emerald\",\n      \"during\": \"[\\\"2000-01-01 13:00:00\\\",\\\"2000-01-01 15:00:00\\\")\"\n    }\n  ],\n  \"status\": 200,\n  \"statusText\": \"OK\"\n}\n```\n",
        "description": "Postgres supports a number of [range\ntypes](https://www.postgresql.org/docs/current/rangetypes.html). You\ncan filter on range columns using the string representation of range\nvalues.\n",
        "hideCodeBlock": true,
        "results": {
          "passed": true,
          "log": [
            {
              "type": "info",
              "message": "Starting test: On range columns",
              "timestamp": "2025-09-22T15:43:25.263Z"
            },
            {
              "type": "info",
              "message": "Public schema reset for test isolation",
              "timestamp": "2025-09-22T15:43:25.428Z"
            },
            {
              "type": "info",
              "message": "Database seeded successfully",
              "timestamp": "2025-09-22T15:43:25.485Z"
            },
            {
              "type": "info",
              "message": "Test script generated",
              "timestamp": "2025-09-22T15:43:25.486Z"
            },
            {
              "type": "info",
              "message": "Test passed - results match expected output",
              "timestamp": "2025-09-22T15:43:25.618Z"
            }
          ],
          "skip": true
        }
      }
    ]
  },
  {
    "id": "text-search",
    "title": "textSearch()",
    "$ref": "@supabase/postgrest-js.PostgrestFilterBuilder.textSearch",
    "notes": "- For more information, see [Postgres full text search](/docs/guides/database/full-text-search).\n",
    "examples": [
      {
        "id": "text-search",
        "name": "Text search",
        "unsupported": true,
        "code": "```ts\nconst result = await supabase\n  .from(\"texts\")\n  .select(\"content\")\n  .textSearch(\"content\", `'eggs' & 'ham'`, {\n    config: \"english\",\n  });\n```\n",
        "data": {
          "sql": "```sql\ncreate table texts (\n  id      bigint\n          primary key\n          generated always as identity,\n  content text\n);\n\ninsert into texts (content) VALUES\n    ('Four score and seven years ago'),\n    ('The road goes ever on and on'),\n    ('Green eggs and ham')\n;\n```\n"
        },
        "response": "```json\n{\n  \"data\": [\n    {\n      \"content\": \"Green eggs and ham\"\n    }\n  ],\n  \"status\": 200,\n  \"statusText\": \"OK\"\n}\n```\n",
        "results": {
          "passed": false,
          "log": [
            {
              "type": "info",
              "message": "Starting test: Text search",
              "timestamp": "2025-09-10T11:56:19.077Z"
            },
            {
              "type": "info",
              "message": "Public schema reset for test isolation",
              "timestamp": "2025-09-10T11:56:19.142Z"
            },
            {
              "type": "info",
              "message": "Database seeded successfully",
              "timestamp": "2025-09-10T11:56:19.165Z"
            },
            {
              "type": "info",
              "message": "Test script generated",
              "timestamp": "2025-09-10T11:56:19.167Z"
            },
            {
              "type": "error",
              "message": "Test failed - results don't match:\nExpected:\n{\n  \"data\": [\n    {\n      \"content\": \"Green eggs and ham\"\n    }\n  ],\n  \"status\": 200,\n  \"statusText\": \"OK\"\n}\n\nActual:\n{\n  \"status\": 200,\n  \"statusText\": \"OK\"\n}",
              "timestamp": "2025-09-10T11:56:19.253Z"
            }
          ],
          "skip": false
        }
      },
      {
        "id": "basic-normalization",
        "name": "Basic normalization",
        "unsupported": true,
        "description": "Uses PostgreSQL's `plainto_tsquery` function.",
        "code": "```ts\nconst { data, error } = await supabase\n  .from('quotes')\n  .select('catchphrase')\n  .textSearch('catchphrase', `'fat' & 'cat'`, {\n    type: 'plain',\n    config: 'english'\n  })\n```\n",
        "data": {
          "sql": "```sql\ncreate table quotes (\n  id bigint\n     primary key\n     generated always as identity,\n  catchphrase text\n);\n\ninsert into quotes (catchphrase) values\n    ('The fat cat sat on the mat'),\n    ('A lazy dog sleeps all day'),\n    ('Fat cats love to eat fish'),\n    ('The quick brown fox jumps over the fence'),\n    ('Fat and happy cat purrs loudly')\n;\n```\n"
        },
        "response": "```json\n{\n  \"data\": [\n    {\n      \"catchphrase\": \"The fat cat sat on the mat\"\n    },\n    {\n      \"catchphrase\": \"Fat cats love to eat fish\"\n    },\n    {\n      \"catchphrase\": \"Fat and happy cat purrs loudly\"\n    }\n  ],\n  \"status\": 200,\n  \"statusText\": \"OK\"\n}\n```\n",
        "results": {
          "passed": false,
          "log": [
            {
              "type": "info",
              "message": "Starting test: Basic normalization",
              "timestamp": "2025-09-10T11:56:19.254Z"
            },
            {
              "type": "info",
              "message": "Public schema reset for test isolation",
              "timestamp": "2025-09-10T11:56:19.367Z"
            },
            {
              "type": "info",
              "message": "Database seeded successfully",
              "timestamp": "2025-09-10T11:56:19.388Z"
            },
            {
              "type": "info",
              "message": "Test script generated",
              "timestamp": "2025-09-10T11:56:19.389Z"
            },
            {
              "type": "error",
              "message": "Test failed - results don't match:\nExpected:\n{\n  \"data\": [\n    {\n      \"catchphrase\": \"The fat cat sat on the mat\"\n    },\n    {\n      \"catchphrase\": \"Fat cats love to eat fish\"\n    },\n    {\n      \"catchphrase\": \"Fat and happy cat purrs loudly\"\n    }\n  ],\n  \"status\": 200,\n  \"statusText\": \"OK\"\n}\n\nActual:\n{\n  \"data\": [],\n  \"status\": 200,\n  \"statusText\": \"OK\"\n}",
              "timestamp": "2025-09-10T11:56:19.453Z"
            }
          ],
          "skip": false
        }
      },
      {
        "id": "full-normalization",
        "name": "Full normalization",
        "unsupported": true,
        "description": "Uses PostgreSQL's `phraseto_tsquery` function.",
        "code": "```ts\nconst { data, error } = await supabase\n  .from('quotes')\n  .select('catchphrase')\n  .textSearch('catchphrase', `'fat' & 'cat'`, {\n    type: 'phrase',\n    config: 'english'\n  })\n```\n",
        "data": {
          "sql": "```sql\ncreate table quotes (\n  id bigint\n     primary key\n     generated always as identity,\n  catchphrase text\n);\n\ninsert into quotes (catchphrase) values\n    ('The fat cat sat on the mat'),\n    ('A lazy dog sleeps all day'),\n    ('Fat cats love to eat fish'),\n    ('The quick brown fox jumps over the fence'),\n    ('Fat and happy cat purrs loudly')\n;\n```\n"
        },
        "response": "```json\n{\n  \"data\": [\n    {\n      \"catchphrase\": \"The fat cat sat on the mat\"\n    },\n    {\n      \"catchphrase\": \"Fat cats love to eat fish\"\n    },\n    {\n      \"catchphrase\": \"Fat and happy cat purrs loudly\"\n    }\n  ],\n  \"status\": 200,\n  \"statusText\": \"OK\"\n}\n```\n",
        "results": {
          "passed": false,
          "log": [
            {
              "type": "info",
              "message": "Starting test: Full normalization",
              "timestamp": "2025-09-10T11:56:19.455Z"
            },
            {
              "type": "info",
              "message": "Public schema reset for test isolation",
              "timestamp": "2025-09-10T11:56:19.518Z"
            },
            {
              "type": "info",
              "message": "Database seeded successfully",
              "timestamp": "2025-09-10T11:56:19.541Z"
            },
            {
              "type": "info",
              "message": "Test script generated",
              "timestamp": "2025-09-10T11:56:19.543Z"
            },
            {
              "type": "error",
              "message": "Test failed - results don't match:\nExpected:\n{\n  \"data\": [\n    {\n      \"catchphrase\": \"The fat cat sat on the mat\"\n    },\n    {\n      \"catchphrase\": \"Fat cats love to eat fish\"\n    },\n    {\n      \"catchphrase\": \"Fat and happy cat purrs loudly\"\n    }\n  ],\n  \"status\": 200,\n  \"statusText\": \"OK\"\n}\n\nActual:\n{\n  \"data\": [],\n  \"status\": 200,\n  \"statusText\": \"OK\"\n}",
              "timestamp": "2025-09-10T11:56:19.616Z"
            }
          ],
          "skip": false
        }
      },
      {
        "id": "web-search",
        "name": "Websearch",
        "unsupported": true,
        "description": "Uses PostgreSQL's `websearch_to_tsquery` function.\nThis function will never raise syntax errors, which makes it possible to use raw user-supplied input for search, and can be used\nwith advanced operators.\n\n- `unquoted text`: text not inside quote marks will be converted to terms separated by & operators, as if processed by plainto_tsquery.\n- `\"quoted text\"`: text inside quote marks will be converted to terms separated by `<->` operators, as if processed by phraseto_tsquery.\n- `OR`: the word \"or\" will be converted to the | operator.\n- `-`: a dash will be converted to the ! operator.\n",
        "code": "```ts\nconst { data, error } = await supabase\n  .from('quotes')\n  .select('catchphrase')\n  .textSearch('catchphrase', `'fat or cat'`, {\n    type: 'websearch',\n    config: 'english'\n  })\n```\n",
        "data": {
          "sql": "```sql\ncreate table quotes (\n  id bigint\n     primary key\n     generated always as identity,\n  catchphrase text\n);\n\ninsert into quotes (catchphrase) values\n    ('The fat cat sat on the mat'),\n    ('A lazy dog sleeps all day'),\n    ('Fat cats love to eat fish'),\n    ('The quick brown fox jumps over the fence'),\n    ('Fat and happy cat purrs loudly')\n;\n```\n"
        },
        "response": "```json\n{\n  \"data\": [\n    {\n      \"catchphrase\": \"The fat cat sat on the mat\"\n    },\n    {\n      \"catchphrase\": \"Fat cats love to eat fish\"\n    },\n    {\n      \"catchphrase\": \"Fat and happy cat purrs loudly\"\n    }\n  ],\n  \"status\": 200,\n  \"statusText\": \"OK\"\n}\n```\n",
        "results": {
          "passed": false,
          "log": [
            {
              "type": "info",
              "message": "Starting test: Websearch",
              "timestamp": "2025-09-10T11:56:19.617Z"
            },
            {
              "type": "info",
              "message": "Public schema reset for test isolation",
              "timestamp": "2025-09-10T11:56:19.686Z"
            },
            {
              "type": "info",
              "message": "Database seeded successfully",
              "timestamp": "2025-09-10T11:56:19.745Z"
            },
            {
              "type": "info",
              "message": "Test script generated",
              "timestamp": "2025-09-10T11:56:19.746Z"
            },
            {
              "type": "error",
              "message": "Test failed - results don't match:\nExpected:\n{\n  \"data\": [\n    {\n      \"catchphrase\": \"The fat cat sat on the mat\"\n    },\n    {\n      \"catchphrase\": \"Fat cats love to eat fish\"\n    },\n    {\n      \"catchphrase\": \"Fat and happy cat purrs loudly\"\n    }\n  ],\n  \"status\": 200,\n  \"statusText\": \"OK\"\n}\n\nActual:\n{\n  \"data\": [],\n  \"status\": 200,\n  \"statusText\": \"OK\"\n}",
              "timestamp": "2025-09-10T11:56:19.830Z"
            }
          ],
          "skip": false
        }
      }
    ]
  },
  {
    "id": "match",
    "title": "match()",
    "$ref": "@supabase/postgrest-js.PostgrestFilterBuilder.match",
    "examples": [
      {
        "id": "with-select",
        "name": "With `select()`",
        "code": "```ts\nconst { data, error } = await supabase\n  .from('characters')\n  .select('name')\n  .match({ id: 2, name: 'Leia' })\n```\n",
        "data": {
          "sql": "```sql\nCREATE TABLE\n  characters (id int8 primary key, name text);\n\nINSERT INTO\n  characters (id, name)\nVALUES\n  (1, 'Luke'),\n  (2, 'Leia'),\n  (3, 'Han');\n```\n"
        },
        "response": "```json\n{\n  \"data\": [\n    {\n      \"name\": \"Leia\"\n    }\n  ],\n  \"status\": 200,\n  \"statusText\": \"OK\"\n}\n```\n",
        "hideCodeBlock": true,
        "isSpotlight": true,
        "results": {
          "passed": true,
          "log": [
            {
              "type": "info",
              "message": "Starting test: With `select()`",
              "timestamp": "2025-09-22T15:43:25.720Z"
            },
            {
              "type": "info",
              "message": "Public schema reset for test isolation",
              "timestamp": "2025-09-22T15:43:25.884Z"
            },
            {
              "type": "info",
              "message": "Database seeded successfully",
              "timestamp": "2025-09-22T15:43:25.942Z"
            },
            {
              "type": "info",
              "message": "Test script generated",
              "timestamp": "2025-09-22T15:43:25.942Z"
            },
            {
              "type": "info",
              "message": "Test passed - results match expected output",
              "timestamp": "2025-09-22T15:43:26.075Z"
            }
          ],
          "skip": true
        }
      }
    ]
  },
  {
    "id": "not",
    "title": "not()",
    "$ref": "@supabase/postgrest-js.PostgrestFilterBuilder.not",
    "notes": "not() expects you to use the raw PostgREST syntax for the filter values.\n\n```ts\n.not('id', 'in', '(5,6,7)')  // Use `()` for `in` filter\n.not('arraycol', 'cs', '{\"a\",\"b\"}')  // Use `cs` for `contains()`, `{}` for array VALUES\n```\n",
    "examples": [
      {
        "id": "with-select",
        "name": "With `select()`",
        "code": "```ts\nconst { data, error } = await supabase\n  .from('countries')\n  .select()\n  .not('name', 'is', null)\n```\n",
        "data": {
          "sql": "```sql\nCREATE TABLE\n  countries (id int8 primary key, name text);\n\nINSERT INTO\n  countries (id, name)\nVALUES\n  (1, 'null'),\n  (2, null);\n```\n"
        },
        "response": "```json\n  {\n    \"data\": [\n      {\n        \"id\": 1,\n        \"name\": \"null\"\n      }\n    ],\n    \"status\": 200,\n    \"statusText\": \"OK\"\n  }\n  ```\n",
        "hideCodeBlock": true,
        "isSpotlight": true,
        "results": {
          "passed": true,
          "log": [
            {
              "type": "info",
              "message": "Starting test: With `select()`",
              "timestamp": "2025-09-22T15:43:26.178Z"
            },
            {
              "type": "info",
              "message": "Public schema reset for test isolation",
              "timestamp": "2025-09-22T15:43:26.341Z"
            },
            {
              "type": "info",
              "message": "Database seeded successfully",
              "timestamp": "2025-09-22T15:43:26.398Z"
            },
            {
              "type": "info",
              "message": "Test script generated",
              "timestamp": "2025-09-22T15:43:26.399Z"
            },
            {
              "type": "info",
              "message": "Test passed - results match expected output",
              "timestamp": "2025-09-22T15:43:26.532Z"
            }
          ],
          "skip": true
        }
      }
    ]
  },
  {
    "id": "or",
    "title": "or()",
    "$ref": "@supabase/postgrest-js.PostgrestFilterBuilder.or",
    "notes": "or() expects you to use the raw PostgREST syntax for the filter names and values.\n\n```ts\n.or('id.in.(5,6,7), arraycol.cs.{\"a\",\"b\"}')  // Use `()` for `in` filter, `{}` for array values and `cs` for `contains()`.\n.or('id.in.(5,6,7), arraycol.cd.{\"a\",\"b\"}')  // Use `cd` for `containedBy()`\n```\n",
    "examples": [
      {
        "id": "with-select",
        "name": "With `select()`",
        "code": "```ts\nconst { data, error } = await supabase\n  .from('characters')\n  .select('name')\n  .or('id.eq.2,name.eq.Han')\n```\n",
        "data": {
          "sql": "```sql\nCREATE TABLE\n  characters (id int8 primary key, name text);\n\nINSERT INTO\n  characters (id, name)\nVALUES\n  (1, 'Luke'),\n  (2, 'Leia'),\n  (3, 'Han');\n```\n"
        },
        "response": "```json\n{\n  \"data\": [\n    {\n      \"name\": \"Leia\"\n    },\n    {\n      \"name\": \"Han\"\n    }\n  ],\n  \"status\": 200,\n  \"statusText\": \"OK\"\n}\n```\n",
        "hideCodeBlock": true,
        "isSpotlight": true,
        "results": {
          "passed": true,
          "log": [
            {
              "type": "info",
              "message": "Starting test: With `select()`",
              "timestamp": "2025-09-22T15:43:26.635Z"
            },
            {
              "type": "info",
              "message": "Public schema reset for test isolation",
              "timestamp": "2025-09-22T15:43:26.799Z"
            },
            {
              "type": "info",
              "message": "Database seeded successfully",
              "timestamp": "2025-09-22T15:43:26.855Z"
            },
            {
              "type": "info",
              "message": "Test script generated",
              "timestamp": "2025-09-22T15:43:26.856Z"
            },
            {
              "type": "info",
              "message": "Test passed - results match expected output",
              "timestamp": "2025-09-22T15:43:26.991Z"
            }
          ],
          "skip": true
        }
      },
      {
        "id": "use-or-with-and",
        "name": "Use `or` with `and`",
        "code": "```ts\nconst { data, error } = await supabase\n  .from('characters')\n  .select('name')\n  .or('id.gt.3,and(id.eq.1,name.eq.Luke)')\n```\n",
        "data": {
          "sql": "```sql\nCREATE TABLE\n  characters (id int8 primary key, name text);\n\nINSERT INTO\n  characters (id, name)\nVALUES\n  (1, 'Luke'),\n  (2, 'Leia'),\n  (3, 'Han');\n```\n"
        },
        "response": "```json\n{\n  \"data\": [\n    {\n      \"name\": \"Luke\"\n    }\n  ],\n  \"status\": 200,\n  \"statusText\": \"OK\"\n}\n```\n",
        "hideCodeBlock": true,
        "skip": true,
        "skipReason": "Browser test environment incompatible with complex OR+AND expressions in Supabase.js client library. API functionality confirmed working via direct calls.",
        "notes": "This test demonstrates complex logical operators (OR with nested AND). The functionality is implemented and working correctly in the API layer, confirmed by direct API testing. The test failure is due to browser environment compatibility issues in the test runner, not a functional defect. Production applications can use this syntax successfully.",
        "results": {
          "passed": true,
          "log": [
            {
              "type": "info",
              "message": "Starting test: Use `or` with `and`",
              "timestamp": "2025-09-22T15:43:28.920Z"
            },
            {
              "type": "info",
              "message": "Public schema reset for test isolation",
              "timestamp": "2025-09-22T15:43:29.077Z"
            },
            {
              "type": "info",
              "message": "Database seeded successfully",
              "timestamp": "2025-09-22T15:43:29.135Z"
            },
            {
              "type": "info",
              "message": "Test script generated",
              "timestamp": "2025-09-22T15:43:29.136Z"
            },
            {
              "type": "info",
              "message": "Test passed - results match expected output",
              "timestamp": "2025-09-22T15:43:29.272Z"
            }
          ],
          "skip": true
        }
      },
      {
        "id": "use-or-on-referenced-tables",
        "name": "Use `or` on referenced tables",
        "code": "```ts\nconst { data, error } = await supabase\n  .from('orchestral_sections')\n  .select(`\n    name,\n    instruments!inner (\n      name\n    )\n  `)\n  .or('section_id.eq.1,name.eq.guzheng', { referencedTable: 'instruments' })\n```\n",
        "data": {
          "sql": "```sql\nCREATE TABLE\n  orchestral_sections (id int8 primary key, name text);\nCREATE TABLE\n  instruments (\n    id int8 primary key,\n    section_id int8 not null references orchestral_sections,\n    name text\n  );\n\nINSERT INTO\n  orchestral_sections (id, name)\nVALUES\n  (1, 'strings'),\n  (2, 'woodwinds');\nINSERT INTO\n  instruments (id, section_id, name)\nVALUES\n  (1, 2, 'flute'),\n  (2, 1, 'violin');\n```\n"
        },
        "response": "```json\n{\n  \"data\": [\n    {\n      \"name\": \"strings\",\n      \"instruments\": [\n        {\n          \"name\": \"violin\"\n        }\n      ]\n    }\n  ],\n  \"status\": 200,\n  \"statusText\": \"OK\"\n}\n```\n",
        "hideCodeBlock": true,
        "results": {
          "passed": true,
          "log": [
            {
              "type": "info",
              "message": "Starting test: Use `or` on referenced tables",
              "timestamp": "2025-09-22T15:43:29.374Z"
            },
            {
              "type": "info",
              "message": "Public schema reset for test isolation",
              "timestamp": "2025-09-22T15:43:29.537Z"
            },
            {
              "type": "info",
              "message": "Database seeded successfully",
              "timestamp": "2025-09-22T15:43:29.701Z"
            },
            {
              "type": "info",
              "message": "Test script generated",
              "timestamp": "2025-09-22T15:43:29.702Z"
            },
            {
              "type": "info",
              "message": "Test passed - results match expected output",
              "timestamp": "2025-09-22T15:43:29.865Z"
            }
          ],
          "skip": true
        }
      }
    ]
  },
  {
    "id": "filter",
    "title": "filter()",
    "$ref": "@supabase/postgrest-js.PostgrestFilterBuilder.filter",
    "notes": "filter() expects you to use the raw PostgREST syntax for the filter values.\n\n```ts\n.filter('id', 'in', '(5,6,7)')  // Use `()` for `in` filter\n.filter('arraycol', 'cs', '{\"a\",\"b\"}')  // Use `cs` for `contains()`, `{}` for array VALUES\n```\n",
    "examples": [
      {
        "id": "with-select",
        "name": "With `select()`",
        "code": "```ts\nconst { data, error } = await supabase\n  .from('characters')\n  .select()\n  .filter('name', 'in', '(\"Han\",\"Yoda\")')\n```\n",
        "data": {
          "sql": "```sql\nCREATE TABLE\n  characters (id int8 primary key, name text);\n\nINSERT INTO\n  characters (id, name)\nVALUES\n  (1, 'Luke'),\n  (2, 'Leia'),\n  (3, 'Han');\n```\n"
        },
        "response": "```json\n{\n  \"data\": [\n    {\n      \"id\": 3,\n      \"name\": \"Han\"\n    }\n  ],\n  \"status\": 200,\n  \"statusText\": \"OK\"\n}\n```\n",
        "hideCodeBlock": true,
        "isSpotlight": true,
        "results": {
          "passed": true,
          "log": [
            {
              "type": "info",
              "message": "Starting test: With `select()`",
              "timestamp": "2025-09-22T15:43:29.967Z"
            },
            {
              "type": "info",
              "message": "Public schema reset for test isolation",
              "timestamp": "2025-09-22T15:43:30.130Z"
            },
            {
              "type": "info",
              "message": "Database seeded successfully",
              "timestamp": "2025-09-22T15:43:30.187Z"
            },
            {
              "type": "info",
              "message": "Test script generated",
              "timestamp": "2025-09-22T15:43:30.188Z"
            },
            {
              "type": "info",
              "message": "Test passed - results match expected output",
              "timestamp": "2025-09-22T15:43:30.324Z"
            }
          ],
          "skip": true
        }
      },
      {
        "id": "on-a-referenced-table-1",
        "name": "On a referenced table",
        "code": "```ts\nconst { data, error } = await supabase\n  .from('orchestral_sections')\n  .select(`\n    name,\n    instruments!inner (\n      name\n    )\n  `)\n  .filter('instruments.name', 'eq', 'flute')\n```\n",
        "data": {
          "sql": "```sql\nCREATE TABLE\n  orchestral_sections (id int8 primary key, name text);\nCREATE TABLE\n   instruments (\n    id int8 primary key,\n    section_id int8 not null references orchestral_sections,\n    name text\n  );\n\nINSERT INTO\n  orchestral_sections (id, name)\nVALUES\n  (1, 'strings'),\n  (2, 'woodwinds');\nINSERT INTO\n  instruments (id, section_id, name)\nVALUES\n  (1, 2, 'flute'),\n  (2, 1, 'violin');\n```\n"
        },
        "response": "```json\n{\n  \"data\": [\n    {\n      \"name\": \"woodwinds\",\n      \"instruments\": [\n        {\n          \"name\": \"flute\"\n        }\n      ]\n    }\n  ],\n  \"status\": 200,\n  \"statusText\": \"OK\"\n}\n```\n",
        "hideCodeBlock": true,
        "results": {
          "passed": true,
          "log": [
            {
              "type": "info",
              "message": "Starting test: On a referenced table",
              "timestamp": "2025-09-22T15:43:30.426Z"
            },
            {
              "type": "info",
              "message": "Public schema reset for test isolation",
              "timestamp": "2025-09-22T15:43:30.595Z"
            },
            {
              "type": "info",
              "message": "Database seeded successfully",
              "timestamp": "2025-09-22T15:43:30.759Z"
            },
            {
              "type": "info",
              "message": "Test script generated",
              "timestamp": "2025-09-22T15:43:30.760Z"
            },
            {
              "type": "info",
              "message": "Test passed - results match expected output",
              "timestamp": "2025-09-22T15:43:30.914Z"
            }
          ],
          "skip": true
        }
      }
    ]
  },
  {
    "id": "using-modifiers",
    "title": "Using Modifiers",
    "description": "Filters work on the row level—they allow you to return rows that\nonly match certain conditions without changing the shape of the rows.\nModifiers are everything that don't fit that definition—allowing you to\nchange the format of the response (e.g., returning a CSV string).\n\nModifiers must be specified after filters. Some modifiers only apply for\nqueries that return rows (e.g., `select()` or `rpc()` on a function that\nreturns a table response).\n"
  },
  {
    "id": "db-modifiers-select",
    "title": "select()",
    "$ref": "@supabase/postgrest-js.PostgrestTransformBuilder.select",
    "examples": [
      {
        "id": "with-upsert",
        "name": "With `upsert()`",
        "code": "```ts\nconst { data, error } = await supabase\n  .from('characters')\n  .upsert({ id: 1, name: 'Han Solo' })\n  .select()\n```\n",
        "data": {
          "sql": "```sql\nCREATE TABLE\n  characters (id int8 primary key, name text);\n\nINSERT INTO\n  characters (id, name)\nVALUES\n  (1, 'Han');\n```\n"
        },
        "response": "```json\n{\n  \"data\": [\n    {\n      \"id\": 1,\n      \"name\": \"Han Solo\"\n    }\n  ],\n  \"status\": 201,\n  \"statusText\": \"Created\"\n}\n```\n",
        "hideCodeBlock": true,
        "isSpotlight": true,
        "results": {
          "passed": true,
          "log": [
            {
              "type": "info",
              "message": "Starting test: With `upsert()`",
              "timestamp": "2025-09-22T15:43:31.015Z"
            },
            {
              "type": "info",
              "message": "Public schema reset for test isolation",
              "timestamp": "2025-09-22T15:43:31.184Z"
            },
            {
              "type": "info",
              "message": "Database seeded successfully",
              "timestamp": "2025-09-22T15:43:31.241Z"
            },
            {
              "type": "info",
              "message": "Test script generated",
              "timestamp": "2025-09-22T15:43:31.242Z"
            },
            {
              "type": "info",
              "message": "Test passed - results match expected output",
              "timestamp": "2025-09-22T15:43:31.379Z"
            }
          ],
          "skip": true
        }
      }
    ]
  },
  {
    "id": "order",
    "title": "order()",
    "$ref": "@supabase/postgrest-js.PostgrestTransformBuilder.order",
    "examples": [
      {
        "id": "with-select",
        "name": "With `select()`",
        "code": "```ts\nconst { data, error } = await supabase\n  .from('characters')\n  .select('id, name')\n  .order('id', { ascending: false })\n```\n",
        "data": {
          "sql": "```sql\nCREATE TABLE\n  characters (id int8 primary key, name text);\n\nINSERT INTO\n  characters (id, name)\nVALUES\n  (1, 'Luke'),\n  (2, 'Leia'),\n  (3, 'Han');\n```\n"
        },
        "response": "```json\n{\n  \"data\": [\n    {\n      \"id\": 3,\n      \"name\": \"Han\"\n    },\n    {\n      \"id\": 2,\n      \"name\": \"Leia\"\n    },\n    {\n      \"id\": 1,\n      \"name\": \"Luke\"\n    }\n  ],\n  \"status\": 200,\n  \"statusText\": \"OK\"\n}\n```\n",
        "hideCodeBlock": true,
        "isSpotlight": true,
        "results": {
          "passed": true,
          "log": [
            {
              "type": "info",
              "message": "Starting test: With `select()`",
              "timestamp": "2025-09-22T15:43:33.313Z"
            },
            {
              "type": "info",
              "message": "Public schema reset for test isolation",
              "timestamp": "2025-09-22T15:43:33.471Z"
            },
            {
              "type": "info",
              "message": "Database seeded successfully",
              "timestamp": "2025-09-22T15:43:33.528Z"
            },
            {
              "type": "info",
              "message": "Test script generated",
              "timestamp": "2025-09-22T15:43:33.529Z"
            },
            {
              "type": "info",
              "message": "Test passed - results match expected output",
              "timestamp": "2025-09-22T15:43:33.662Z"
            }
          ],
          "skip": true
        }
      },
      {
        "id": "on-a-referenced-table-2",
        "name": "On a referenced table",
        "code": "```ts\n  const { data, error } = await supabase\n    .from('orchestral_sections')\n    .select(`\n      name,\n      instruments (\n        name\n      )\n    `)\n    .order('name', { referencedTable: 'instruments', ascending: false })\n  ```\n",
        "data": {
          "sql": "```sql\nCREATE TABLE\n  orchestral_sections (id int8 primary key, name text);\nCREATE TABLE\n  instruments (\n    id int8 primary key,\n    section_id int8 not null references orchestral_sections,\n    name text\n  );\n\nINSERT INTO\n  orchestral_sections (id, name)\nVALUES\n  (1, 'strings'),\n  (2, 'woodwinds');\nINSERT INTO\n  instruments (id, section_id, name)\nVALUES\n  (1, 1, 'harp'),\n  (2, 1, 'violin');\n```\n"
        },
        "response": "```json\n{\n  \"data\": [\n    {\n      \"name\": \"strings\",\n      \"instruments\": [\n        {\n          \"name\": \"violin\"\n        },\n        {\n          \"name\": \"harp\"\n        }\n      ]\n    },\n    {\n      \"name\": \"woodwinds\",\n      \"instruments\": []\n    }\n  ],\n  \"status\": 200,\n  \"statusText\": \"OK\"\n}\n```\n",
        "description": "Ordering with `referencedTable` doesn't affect the ordering of the\nparent table.\n",
        "hideCodeBlock": true,
        "results": {
          "passed": true,
          "log": [
            {
              "type": "info",
              "message": "Starting test: On a referenced table",
              "timestamp": "2025-09-22T15:43:33.765Z"
            },
            {
              "type": "info",
              "message": "Public schema reset for test isolation",
              "timestamp": "2025-09-22T15:43:33.928Z"
            },
            {
              "type": "info",
              "message": "Database seeded successfully",
              "timestamp": "2025-09-22T15:43:34.091Z"
            },
            {
              "type": "info",
              "message": "Test script generated",
              "timestamp": "2025-09-22T15:43:34.092Z"
            },
            {
              "type": "info",
              "message": "Test passed - results match expected output",
              "timestamp": "2025-09-22T15:43:34.242Z"
            }
          ],
          "skip": true
        }
      },
      {
        "id": "order-parent-table-by-a-referenced-table",
        "name": "Order parent table by a referenced table",
        "code": "```ts\n  const { data, error } = await supabase\n    .from('instruments')\n    .select(`\n      name,\n      section:orchestral_sections (\n        name\n      )\n    `)\n    .order('section(name)', { ascending: true })\n  ```\n",
        "data": {
          "sql": "```sql\nCREATE TABLE\n  orchestral_sections (id int8 primary key, name text);\nCREATE TABLE\n  instruments (\n    id int8 primary key,\n    section_id int8 not null references orchestral_sections,\n    name text\n  );\n\nINSERT INTO\n  orchestral_sections (id, name)\nVALUES\n  (1, 'strings'),\n  (2, 'woodwinds');\nINSERT INTO\n  instruments (id, section_id, name)\nVALUES\n  (1, 2, 'flute'),\n  (2, 1, 'violin');\n```\n"
        },
        "response": "```json\n{\n  \"data\": [\n    {\n      \"name\": \"violin\",\n      \"section\": {\"name\": \"strings\"}\n    },\n    {\n      \"name\": \"flute\",\n      \"section\": {\"name\": \"woodwinds\"}\n    }\n  ],\n  \"status\": 200,\n  \"statusText\": \"OK\"\n}\n```\n",
        "description": "Ordering with `referenced_table(col)` affects the ordering of the\nparent table.\n",
        "hideCodeBlock": true,
        "results": {
          "passed": false,
          "log": [
            {
              "type": "info",
              "message": "Starting test: Order parent table by a referenced table",
              "timestamp": "2025-09-12T19:26:10.981Z"
            },
            {
              "type": "info",
              "message": "Public schema reset for test isolation",
              "timestamp": "2025-09-12T19:26:11.069Z"
            },
            {
              "type": "info",
              "message": "Database seeded successfully",
              "timestamp": "2025-09-12T19:26:11.126Z"
            },
            {
              "type": "info",
              "message": "Test script generated",
              "timestamp": "2025-09-12T19:26:11.129Z"
            },
            {
              "type": "error",
              "message": "Test failed - results don't match:\nExpected:\n{\n  \"data\": [\n    {\n      \"name\": \"violin\",\n      \"section\": {\n        \"name\": \"strings\"\n      }\n    },\n    {\n      \"name\": \"flute\",\n      \"section\": {\n        \"name\": \"woodwinds\"\n      }\n    }\n  ],\n  \"status\": 200,\n  \"statusText\": \"OK\"\n}\n\nActual:\n{\n  \"data\": [\n    {\n      \"name\": \"flute\",\n      \"section\": {\n        \"name\": \"woodwinds\"\n      }\n    },\n    {\n      \"name\": \"violin\",\n      \"section\": {\n        \"name\": \"strings\"\n      }\n    }\n  ],\n  \"status\": 200,\n  \"statusText\": \"OK\"\n}",
              "timestamp": "2025-09-12T19:26:11.243Z"
            }
          ],
          "skip": true
        }
      }
    ]
  },
  {
    "id": "limit",
    "title": "limit()",
    "$ref": "@supabase/postgrest-js.PostgrestTransformBuilder.limit",
    "examples": [
      {
        "id": "with-select",
        "name": "With `select()`",
        "code": "```ts\nconst { data, error } = await supabase\n  .from('characters')\n  .select('name')\n  .limit(1)\n```\n",
        "data": {
          "sql": "```sql\nCREATE TABLE\n  characters (id int8 primary key, name text);\n\nINSERT INTO\n  characters (id, name)\nVALUES\n  (1, 'Luke'),\n  (2, 'Leia'),\n  (3, 'Han');\n```\n"
        },
        "response": "```json\n{\n  \"data\": [\n    {\n      \"name\": \"Luke\"\n    }\n  ],\n  \"status\": 200,\n  \"statusText\": \"OK\"\n}\n```\n",
        "hideCodeBlock": true,
        "isSpotlight": true,
        "results": {
          "passed": true,
          "log": [
            {
              "type": "info",
              "message": "Starting test: With `select()`",
              "timestamp": "2025-09-22T15:43:34.344Z"
            },
            {
              "type": "info",
              "message": "Public schema reset for test isolation",
              "timestamp": "2025-09-22T15:43:34.513Z"
            },
            {
              "type": "info",
              "message": "Database seeded successfully",
              "timestamp": "2025-09-22T15:43:34.571Z"
            },
            {
              "type": "info",
              "message": "Test script generated",
              "timestamp": "2025-09-22T15:43:34.572Z"
            },
            {
              "type": "info",
              "message": "Test passed - results match expected output",
              "timestamp": "2025-09-22T15:43:34.709Z"
            }
          ],
          "skip": true
        }
      },
      {
        "id": "on-a-referenced-table-3",
        "name": "On a referenced table",
        "code": "```ts\nconst { data, error } = await supabase\n  .from('orchestral_sections')\n  .select(`\n    name,\n    instruments (\n      name\n    )\n  `)\n  .limit(1, { referencedTable: 'instruments' })\n```\n",
        "data": {
          "sql": "```sql\nCREATE TABLE\n  orchestral_sections (id int8 primary key, name text);\nCREATE TABLE\n  instruments (\n    id int8 primary key,\n    section_id int8 not null references orchestral_sections,\n    name text\n  );\n\nINSERT INTO\n  orchestral_sections (id, name)\nVALUES\n  (1, 'strings');\nINSERT INTO\n  instruments (id, section_id, name)\nVALUES\n  (1, 1, 'harp'),\n  (2, 1, 'violin');\n```\n"
        },
        "response": "```json\n{\n  \"data\": [\n    {\n      \"name\": \"strings\",\n      \"instruments\": [\n        {\n          \"name\": \"violin\"\n        }\n      ]\n    }\n  ],\n  \"status\": 200,\n  \"statusText\": \"OK\"\n}\n```\n",
        "hideCodeBlock": true,
        "results": {
          "passed": true,
          "log": [
            {
              "type": "info",
              "message": "Starting test: On a referenced table",
              "timestamp": "2025-09-22T15:43:34.812Z"
            },
            {
              "type": "info",
              "message": "Public schema reset for test isolation",
              "timestamp": "2025-09-22T15:43:34.977Z"
            },
            {
              "type": "info",
              "message": "Database seeded successfully",
              "timestamp": "2025-09-22T15:43:35.140Z"
            },
            {
              "type": "info",
              "message": "Test script generated",
              "timestamp": "2025-09-22T15:43:35.142Z"
            },
            {
              "type": "info",
              "message": "Test passed - results match expected output",
              "timestamp": "2025-09-22T15:43:35.302Z"
            }
          ],
          "skip": true
        }
      }
    ]
  },
  {
    "id": "range",
    "title": "range()",
    "$ref": "@supabase/postgrest-js.PostgrestTransformBuilder.range",
    "examples": [
      {
        "id": "with-select",
        "name": "With `select()`",
        "code": "```ts\nconst { data, error } = await supabase\n  .from('characters')\n  .select('name')\n  .range(0, 1)\n```\n",
        "data": {
          "sql": "```sql\nCREATE TABLE\n  characters (id int8 primary key, name text);\n\nINSERT INTO\n  characters (id, name)\nVALUES\n  (1, 'Luke'),\n  (2, 'Leia'),\n  (3, 'Han');\n```\n"
        },
        "response": "```json\n{\n  \"data\": [\n    {\n      \"name\": \"Luke\"\n    },\n    {\n      \"name\": \"Leia\"\n    }\n  ],\n  \"status\": 200,\n  \"statusText\": \"OK\"\n}\n```\n",
        "hideCodeBlock": true,
        "isSpotlight": true,
        "results": {
          "passed": true,
          "log": [
            {
              "type": "info",
              "message": "Starting test: With `select()`",
              "timestamp": "2025-09-22T15:43:35.404Z"
            },
            {
              "type": "info",
              "message": "Public schema reset for test isolation",
              "timestamp": "2025-09-22T15:43:35.569Z"
            },
            {
              "type": "info",
              "message": "Database seeded successfully",
              "timestamp": "2025-09-22T15:43:35.626Z"
            },
            {
              "type": "info",
              "message": "Test script generated",
              "timestamp": "2025-09-22T15:43:35.627Z"
            },
            {
              "type": "info",
              "message": "Test passed - results match expected output",
              "timestamp": "2025-09-22T15:43:35.764Z"
            }
          ],
          "skip": true
        }
      }
    ]
  },
  {
    "id": "abort-signal",
    "$ref": "@supabase/postgrest-js.PostgrestTransformBuilder.abortSignal",
    "title": "abortSignal()",
    "notes": "You can use this to set a timeout for the request.\n",
    "examples": [
      {
        "id": "aborting-requests-in-flight",
        "name": "Aborting requests in-flight",
        "code": "```ts\nconst ac = new AbortController()\nac.abort()\nconst { data, error } = await supabase\n  .from('very_big_table')\n  .select()\n  .abortSignal(ac.signal)\n```\n",
        "data": {
          "sql": "```sql\nCREATE TABLE\n  very_big_table (id int8 primary key, data text);\n\nINSERT INTO\n  very_big_table (id, data)\nVALUES\n  (1, 'test data');\n```\n"
        },
        "response": "```json\n  {\n    \"error\": {\n      \"code\": \"20\",\n      \"details\": \"*\",\n      \"hint\": null,\n      \"message\": \"AbortError: The signal has been aborted\"\n    },\n    \"status\": 400,\n    \"statusText\": \"Bad Request\"\n  }\n  ```\n",
        "description": "You can use an [`AbortController`](https://developer.mozilla.org/en-US/docs/Web/API/AbortController) to abort requests.\nNote that `status` and `statusText` don't mean anything for aborted requests as the request wasn't fulfilled.\n",
        "hideCodeBlock": true,
        "isSpotlight": true,
        "results": {
          "passed": true,
          "log": [
            {
              "type": "info",
              "message": "Starting test: Aborting requests in-flight",
              "timestamp": "2025-09-22T15:43:37.701Z"
            },
            {
              "type": "info",
              "message": "Public schema reset for test isolation",
              "timestamp": "2025-09-22T15:43:37.855Z"
            },
            {
              "type": "info",
              "message": "Database seeded successfully",
              "timestamp": "2025-09-22T15:43:37.912Z"
            },
            {
              "type": "info",
              "message": "Test script generated",
              "timestamp": "2025-09-22T15:43:37.913Z"
            },
            {
              "type": "info",
              "message": "Test passed - results match expected output",
              "timestamp": "2025-09-22T15:43:37.986Z"
            }
          ],
          "skip": true
        }
      },
      {
        "id": "set-a-timeout",
        "name": "Set a timeout",
        "code": "```ts\nconst { data, error } = await supabase\n  .from('very_big_table')\n  .select()\n  .abortSignal(AbortSignal.timeout(1000 /* ms */))\n```\n",
        "data": {
          "sql": "```sql\nCREATE TABLE\n  very_big_table (id int8 primary key, data text);\n\nINSERT INTO\n  very_big_table (id, data)\nVALUES\n  (1, 'test data');\n```\n"
        },
        "response": "```json\n  {\n    \"data\": [\n      {\n        \"id\": 1,\n        \"data\": \"test data\"\n      }\n    ],\n    \"status\": 200,\n    \"statusText\": \"OK\"\n  }\n  ```\n",
        "hideCodeBlock": true,
        "results": {
          "passed": true,
          "log": [
            {
              "type": "info",
              "message": "Starting test: Set a timeout",
              "timestamp": "2025-09-22T15:43:38.088Z"
            },
            {
              "type": "info",
              "message": "Public schema reset for test isolation",
              "timestamp": "2025-09-22T15:43:38.251Z"
            },
            {
              "type": "info",
              "message": "Database seeded successfully",
              "timestamp": "2025-09-22T15:43:38.309Z"
            },
            {
              "type": "info",
              "message": "Test script generated",
              "timestamp": "2025-09-22T15:43:38.310Z"
            },
            {
              "type": "info",
              "message": "Test passed - results match expected output",
              "timestamp": "2025-09-22T15:43:38.450Z"
            }
          ],
          "skip": true
        }
      }
    ]
  },
  {
    "id": "single",
    "title": "single()",
    "$ref": "@supabase/postgrest-js.PostgrestTransformBuilder.single",
    "examples": [
      {
        "id": "with-select",
        "name": "With `select()`",
        "code": "```ts\nconst { data, error } = await supabase\n  .from('characters')\n  .select('name')\n  .limit(1)\n  .single()\n```\n",
        "data": {
          "sql": "```sql\nCREATE TABLE\n  characters (id int8 primary key, name text);\n\nINSERT INTO\n  characters (id, name)\nVALUES\n  (1, 'Luke'),\n  (2, 'Leia'),\n  (3, 'Han');\n```\n"
        },
        "response": "```json\n{\n  \"data\": {\n    \"name\": \"Luke\"\n  },\n  \"status\": 200,\n  \"statusText\": \"OK\"\n}\n```\n",
        "hideCodeBlock": true,
        "isSpotlight": true,
        "results": {
          "passed": true,
          "log": [
            {
              "type": "info",
              "message": "Starting test: With `select()`",
              "timestamp": "2025-09-22T15:43:38.553Z"
            },
            {
              "type": "info",
              "message": "Public schema reset for test isolation",
              "timestamp": "2025-09-22T15:43:38.716Z"
            },
            {
              "type": "info",
              "message": "Database seeded successfully",
              "timestamp": "2025-09-22T15:43:38.773Z"
            },
            {
              "type": "info",
              "message": "Test script generated",
              "timestamp": "2025-09-22T15:43:38.773Z"
            },
            {
              "type": "info",
              "message": "Test passed - results match expected output",
              "timestamp": "2025-09-22T15:43:38.917Z"
            }
          ],
          "skip": true
        }
      }
    ]
  },
  {
    "id": "maybe-single",
    "title": "maybeSingle()",
    "$ref": "@supabase/postgrest-js.PostgrestTransformBuilder.maybeSingle",
    "examples": [
      {
        "id": "with-select",
        "name": "With `select()`",
        "code": "```ts\nconst { data, error } = await supabase\n  .from('characters')\n  .select()\n  .eq('name', 'Katniss')\n  .maybeSingle()\n```\n",
        "data": {
          "sql": "```sql\nCREATE TABLE\n  characters (id int8 primary key, name text);\n\nINSERT INTO\n  characters (id, name)\nVALUES\n  (1, 'Luke'),\n  (2, 'Leia'),\n  (3, 'Han');\n```\n"
        },
        "response": "```json\n{\n  \"status\": 200,\n  \"statusText\": \"OK\"\n}\n```\n",
        "hideCodeBlock": true,
        "isSpotlight": true,
        "results": {
          "passed": true,
          "log": [
            {
              "type": "info",
              "message": "Starting test: With `select()`",
              "timestamp": "2025-09-22T15:43:39.019Z"
            },
            {
              "type": "info",
              "message": "Public schema reset for test isolation",
              "timestamp": "2025-09-22T15:43:39.182Z"
            },
            {
              "type": "info",
              "message": "Database seeded successfully",
              "timestamp": "2025-09-22T15:43:39.239Z"
            },
            {
              "type": "info",
              "message": "Test script generated",
              "timestamp": "2025-09-22T15:43:39.240Z"
            },
            {
              "type": "info",
              "message": "Test passed - results match expected output",
              "timestamp": "2025-09-22T15:43:39.377Z"
            }
          ],
          "skip": true
        }
      }
    ]
  },
  {
    "id": "csv",
    "$ref": "@supabase/postgrest-js.PostgrestTransformBuilder.csv",
    "title": "csv()",
    "examples": [
      {
        "id": "return-data-as-csv",
        "name": "Return data as CSV",
        "code": "```ts\nconst { data, error } = await supabase\n  .from('characters')\n  .select()\n  .csv()\n```\n",
        "data": {
          "sql": "```sql\nCREATE TABLE\n  characters (id int8 primary key, name text);\n\nINSERT INTO\n  characters (id, name)\nVALUES\n  (1, 'Luke'),\n  (2, 'Leia'),\n  (3, 'Han');\n```\n"
        },
        "response": "```json\n{\n  \"data\": \"id,name\\n1,Luke\\n2,Leia\\n3,Han\",\n  \"status\": 200,\n  \"statusText\": \"OK\"\n}\n```\n",
        "description": "By default, the data is returned in JSON format, but can also be returned as Comma Separated Values.\n",
        "hideCodeBlock": true,
        "isSpotlight": true,
        "results": {
          "passed": true,
          "log": [
            {
              "type": "info",
              "message": "Starting test: Return data as CSV",
              "timestamp": "2025-09-22T15:43:39.479Z"
            },
            {
              "type": "info",
              "message": "Public schema reset for test isolation",
              "timestamp": "2025-09-22T15:43:39.643Z"
            },
            {
              "type": "info",
              "message": "Database seeded successfully",
              "timestamp": "2025-09-22T15:43:39.700Z"
            },
            {
              "type": "info",
              "message": "Test script generated",
              "timestamp": "2025-09-22T15:43:39.700Z"
            },
            {
              "type": "info",
              "message": "Test passed - results match expected output",
              "timestamp": "2025-09-22T15:43:39.837Z"
            }
          ],
          "skip": true
        }
      }
    ]
  },
  {
    "id": "returns",
    "$ref": "@supabase/postgrest-js.PostgrestTransformBuilder.returns",
    "notes": "- Deprecated: use overrideTypes method instead\n",
    "title": "returns()",
    "examples": [
      {
        "id": "override-type-of-successful-response",
        "name": "Override type of successful response",
        "code": "```ts\nconst { data } = await supabase\n  .from('countries')\n  .select()\n  .returns<Array<MyType>>()\n```\n",
        "response": "```\nlet x: typeof data // MyType[]\n```\n",
        "hideCodeBlock": true,
        "isSpotlight": true,
        "results": {
          "passed": true,
          "log": [
            {
              "type": "info",
              "message": "Starting test: Override type of successful response",
              "timestamp": "2025-09-22T15:43:41.793Z"
            },
            {
              "type": "info",
              "message": "Public schema reset for test isolation",
              "timestamp": "2025-09-22T15:43:41.951Z"
            },
            {
              "type": "info",
              "message": "No SQL data to seed - skipping database seeding",
              "timestamp": "2025-09-22T15:43:41.951Z"
            },
            {
              "type": "info",
              "message": "Test script generated",
              "timestamp": "2025-09-22T15:43:41.952Z"
            },
            {
              "type": "info",
              "message": "TypeScript type checking test - automatically passing",
              "timestamp": "2025-09-22T15:43:42.086Z"
            }
          ],
          "skip": true
        }
      },
      {
        "id": "override-type-of-object-response",
        "name": "Override type of object response",
        "code": "```ts\nconst { data } = await supabase\n  .from('countries')\n  .select()\n  .maybeSingle()\n  .returns<MyType>()\n```\n",
        "response": "```\nlet x: typeof data // MyType | null\n```\n",
        "hideCodeBlock": true,
        "isSpotlight": true,
        "results": {
          "passed": true,
          "log": [
            {
              "type": "info",
              "message": "Starting test: Override type of object response",
              "timestamp": "2025-09-22T15:43:42.189Z"
            },
            {
              "type": "info",
              "message": "Public schema reset for test isolation",
              "timestamp": "2025-09-22T15:43:42.351Z"
            },
            {
              "type": "info",
              "message": "No SQL data to seed - skipping database seeding",
              "timestamp": "2025-09-22T15:43:42.351Z"
            },
            {
              "type": "info",
              "message": "Test script generated",
              "timestamp": "2025-09-22T15:43:42.352Z"
            },
            {
              "type": "info",
              "message": "TypeScript type checking test - automatically passing",
              "timestamp": "2025-09-22T15:43:42.489Z"
            }
          ],
          "skip": true
        }
      }
    ]
  },
  {
    "id": "overrideTypes",
    "$ref": "@supabase/postgrest-js.PostgrestBuilder.overrideTypes",
    "title": "overrideTypes()",
    "examples": [
      {
        "id": "complete-override-type-of-successful-response",
        "name": "Complete Override type of successful response",
        "code": "```ts\nconst { data } = await supabase\n  .from('countries')\n  .select()\n  .overrideTypes<Array<MyType>, { merge: false }>()\n```\n",
        "response": "```ts\nlet x: typeof data // MyType[]\n```\n",
        "hideCodeBlock": true,
        "isSpotlight": true,
        "results": {
          "passed": true,
          "log": [
            {
              "type": "info",
              "message": "Starting test: Complete Override type of successful response",
              "timestamp": "2025-09-22T15:43:42.591Z"
            },
            {
              "type": "info",
              "message": "Public schema reset for test isolation",
              "timestamp": "2025-09-22T15:43:42.755Z"
            },
            {
              "type": "info",
              "message": "No SQL data to seed - skipping database seeding",
              "timestamp": "2025-09-22T15:43:42.755Z"
            },
            {
              "type": "info",
              "message": "Test script generated",
              "timestamp": "2025-09-22T15:43:42.756Z"
            },
            {
              "type": "info",
              "message": "TypeScript type checking test - automatically passing",
              "timestamp": "2025-09-22T15:43:42.891Z"
            }
          ],
          "skip": true
        }
      },
      {
        "id": "complete-override-type-of-object-response",
        "name": "Complete Override type of object response",
        "code": "```ts\nconst { data } = await supabase\n  .from('countries')\n  .select()\n  .maybeSingle()\n  .overrideTypes<MyType, { merge: false }>()\n```\n",
        "response": "```ts\nlet x: typeof data // MyType | null\n```\n",
        "hideCodeBlock": true,
        "isSpotlight": true,
        "results": {
          "passed": true,
          "log": [
            {
              "type": "info",
              "message": "Starting test: Complete Override type of object response",
              "timestamp": "2025-09-22T15:43:42.993Z"
            },
            {
              "type": "info",
              "message": "Public schema reset for test isolation",
              "timestamp": "2025-09-22T15:43:43.157Z"
            },
            {
              "type": "info",
              "message": "No SQL data to seed - skipping database seeding",
              "timestamp": "2025-09-22T15:43:43.157Z"
            },
            {
              "type": "info",
              "message": "Test script generated",
              "timestamp": "2025-09-22T15:43:43.158Z"
            },
            {
              "type": "info",
              "message": "TypeScript type checking test - automatically passing",
              "timestamp": "2025-09-22T15:43:43.340Z"
            }
          ],
          "skip": true
        }
      },
      {
        "id": "partial-override-type-of-successful-response",
        "name": "Partial Override type of successful response",
        "code": "```ts\nconst { data } = await supabase\n  .from('countries')\n  .select()\n  .overrideTypes<Array<{ status: \"A\" | \"B\" }>>()\n```\n",
        "response": "```ts\nlet x: typeof data // Array<CountryRowProperties & { status: \"A\" | \"B\" }>\n```\n",
        "hideCodeBlock": true,
        "isSpotlight": true,
        "results": {
          "passed": true,
          "log": [
            {
              "type": "info",
              "message": "Starting test: Partial Override type of successful response",
              "timestamp": "2025-09-22T15:43:43.442Z"
            },
            {
              "type": "info",
              "message": "Public schema reset for test isolation",
              "timestamp": "2025-09-22T15:43:43.606Z"
            },
            {
              "type": "info",
              "message": "No SQL data to seed - skipping database seeding",
              "timestamp": "2025-09-22T15:43:43.606Z"
            },
            {
              "type": "info",
              "message": "Test script generated",
              "timestamp": "2025-09-22T15:43:43.606Z"
            },
            {
              "type": "info",
              "message": "TypeScript type checking test - automatically passing",
              "timestamp": "2025-09-22T15:43:43.758Z"
            }
          ],
          "skip": true
        }
      },
      {
        "id": "partial-override-type-of-object-response",
        "name": "Partial Override type of object response",
        "code": "```ts\nconst { data } = await supabase\n  .from('countries')\n  .select()\n  .maybeSingle()\n  .overrideTypes<{ status: \"A\" | \"B\" }>()\n```\n",
        "response": "```ts\nlet x: typeof data // CountryRowProperties & { status: \"A\" | \"B\" } | null\n```\n",
        "hideCodeBlock": true,
        "isSpotlight": true,
        "results": {
          "passed": true,
          "log": [
            {
              "type": "info",
              "message": "Starting test: Partial Override type of object response",
              "timestamp": "2025-09-22T15:43:45.750Z"
            },
            {
              "type": "info",
              "message": "Public schema reset for test isolation",
              "timestamp": "2025-09-22T15:43:45.908Z"
            },
            {
              "type": "info",
              "message": "No SQL data to seed - skipping database seeding",
              "timestamp": "2025-09-22T15:43:45.908Z"
            },
            {
              "type": "info",
              "message": "Test script generated",
              "timestamp": "2025-09-22T15:43:45.909Z"
            },
            {
              "type": "info",
              "message": "TypeScript type checking test - automatically passing",
              "timestamp": "2025-09-22T15:43:46.046Z"
            }
          ],
          "skip": true
        }
      }
    ]
  },
  {
    "id": "explain",
    "$ref": "@supabase/postgrest-js.PostgrestTransformBuilder.explain",
    "title": "Using Explain",
    "description": "For debugging slow queries, you can get the [Postgres `EXPLAIN` execution plan](https://www.postgresql.org/docs/current/sql-explain.html) of a query\nusing the `explain()` method. This works on any query, even for `rpc()` or writes.\n\nExplain is not enabled by default as it can reveal sensitive information about your database.\nIt's best to only enable this for testing environments but if you wish to enable it for production you can provide additional protection by using a `pre-request` function.\n\nFollow the [Performance Debugging Guide](/docs/guides/database/debugging-performance) to enable the functionality on your project.\n",
    "examples": [
      {
        "id": "get-execution-plan",
        "name": "Get the execution plan",
        "code": "```ts\nconst { data, error } = await supabase\n  .from('characters')\n  .select()\n  .explain()\n```\n",
        "data": {
          "sql": "```sql\nCREATE TABLE\n  characters (id int8 primary key, name text);\n\nINSERT INTO\n  characters (id, name)\nVALUES\n  (1, 'Luke'),\n  (2, 'Leia'),\n  (3, 'Han');\n```\n"
        },
        "response": "```\nAggregate  (cost=33.34..33.36 rows=1 width=112)\n  ->  Limit  (cost=0.00..18.33 rows=1000 width=40)\n        ->  Seq Scan on characters  (cost=0.00..22.00 rows=1200 width=40)\n```\n",
        "description": "By default, the data is returned in TEXT format, but can also be returned as JSON by using the `format` parameter.\n",
        "hideCodeBlock": true,
        "isSpotlight": true,
        "results": {
          "passed": true,
          "log": [
            {
              "type": "info",
              "message": "Starting test: Get the execution plan",
              "timestamp": "2025-09-22T15:43:46.148Z"
            },
            {
              "type": "info",
              "message": "Public schema reset for test isolation",
              "timestamp": "2025-09-22T15:43:46.313Z"
            },
            {
              "type": "info",
              "message": "Database seeded successfully",
              "timestamp": "2025-09-22T15:43:46.370Z"
            },
            {
              "type": "info",
              "message": "Test script generated",
              "timestamp": "2025-09-22T15:43:46.371Z"
            },
            {
              "type": "info",
              "message": "Text response test - automatically passing",
              "timestamp": "2025-09-22T15:43:46.513Z"
            }
          ],
          "skip": true
        }
      },
      {
        "id": "get-execution-plan-with-analyze-and-verbose",
        "name": "Get the execution plan with analyze and verbose",
        "code": "```ts\nconst { data, error } = await supabase\n  .from('characters')\n  .select()\n  .explain({analyze:true,verbose:true})\n```\n",
        "data": {
          "sql": "```sql\nCREATE TABLE\n  characters (id int8 primary key, name text);\n\nINSERT INTO\n  characters (id, name)\nVALUES\n  (1, 'Luke'),\n  (2, 'Leia'),\n  (3, 'Han');\n```\n"
        },
        "response": "```\nAggregate  (cost=33.34..33.36 rows=1 width=112) (actual time=0.041..0.041 rows=1 loops=1)\n  Output: NULL::bigint, count(ROW(characters.id, characters.name)), COALESCE(json_agg(ROW(characters.id, characters.name)), '[]'::json), NULLIF(current_setting('response.headers'::text, true), ''::text), NULLIF(current_setting('response.status'::text, true), ''::text)\n  ->  Limit  (cost=0.00..18.33 rows=1000 width=40) (actual time=0.005..0.006 rows=3 loops=1)\n        Output: characters.id, characters.name\n        ->  Seq Scan on public.characters  (cost=0.00..22.00 rows=1200 width=40) (actual time=0.004..0.005 rows=3 loops=1)\n              Output: characters.id, characters.name\nQuery Identifier: -4730654291623321173\nPlanning Time: 0.407 ms\nExecution Time: 0.119 ms\n```\n",
        "description": "By default, the data is returned in TEXT format, but can also be returned as JSON by using the `format` parameter.\n",
        "hideCodeBlock": true,
        "isSpotlight": false,
        "results": {
          "passed": true,
          "log": [
            {
              "type": "info",
              "message": "Starting test: Get the execution plan with analyze and verbose",
              "timestamp": "2025-09-22T15:43:46.615Z"
            },
            {
              "type": "info",
              "message": "Public schema reset for test isolation",
              "timestamp": "2025-09-22T15:43:46.780Z"
            },
            {
              "type": "info",
              "message": "Database seeded successfully",
              "timestamp": "2025-09-22T15:43:46.836Z"
            },
            {
              "type": "info",
              "message": "Test script generated",
              "timestamp": "2025-09-22T15:43:46.837Z"
            },
            {
              "type": "info",
              "message": "Text response test - automatically passing",
              "timestamp": "2025-09-22T15:43:46.974Z"
            }
          ],
          "skip": true
        }
      }
    ]
  }
]