// id: <id>
// name: <name>       
import { createClient } from '@supabase/supabase-js';
const SUPABASE_CONFIG = {
    url: '<project_url>',
    anonKey: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZS1kZW1vIiwicm9sZSI6ImFub24iLCJleHAiOjE5ODM4MTI5OTZ9.CRXP1A7WOeoJeXxjNni43kdQwgnWNReilDMblYTn_I0',
    debugSqlEndpoint: 'http://localhost:5173/debug/sql'
};
const supabase = createClient(SUPABASE_CONFIG.url, SUPABASE_CONFIG.anonKey);
const expected_response = <response>;

// Helper functions for error mapping
function getStatusCodeFromError(errorCode: string): number {
    switch (errorCode) {
        case '23505': // unique_violation
            return 409;
        case '23503': // foreign_key_violation
            return 409;
        case '23502': // not_null_violation
            return 400;
        case '23514': // check_violation
            return 400;
        case '42P01': // undefined_table
            return 404;
        case '42703': // undefined_column
            return 400;
        default:
            return 400;
    }
}

function getStatusTextFromError(errorCode: string): string {
    switch (errorCode) {
        case '23505': // unique_violation
        case '23503': // foreign_key_violation
            return 'Conflict';
        case '42P01': // undefined_table
            return 'Not Found';
        default:
            return 'Bad Request';
    }
}
async function run() {
    try {
        <code>
        
        // Handle error cases - format as PostgREST error response
        if (error) {
            // Create PostgREST-compatible error response
            const response = {
                error: {
                    code: error.code || 'UNKNOWN',
                    details: error.details || null,
                    hint: error.hint || null,
                    message: error.message || 'An error occurred'
                },
                status: getStatusCodeFromError(error.code),
                statusText: getStatusTextFromError(error.code)
            };
            
            console.log('Data:', JSON.stringify(response));
            return;
        }
        
        // Create Supabase-compatible response structure
        // Handle different response types (data queries vs count queries vs mutation operations)
        let response;
        if (typeof data !== 'undefined' && data !== null) {
            // Check if this is an INSERT/UPDATE/DELETE operation by examining the code
            const codeString = `<code_content>`;
            const isInsertOperation = codeString.includes('.insert(');
            const isUpdateOperation = codeString.includes('.update(');
            const isUpsertOperation = codeString.includes('.upsert(');
            const isDeleteOperation = codeString.includes('.delete(');
            const hasSelectClause = codeString.includes('.select(');
            
            if (isInsertOperation || isUpsertOperation) {
                if (hasSelectClause) {
                    // INSERT/UPSERT with .select() - should return 201 Created with data
                    response = {
                        data: data,
                        status: 201,
                        statusText: "Created"
                    };
                } else {
                    // INSERT/UPSERT without .select() - should return 201 Created, no data
                    response = {
                        status: 201,
                        statusText: "Created"
                    };
                }
            } else if (isUpdateOperation || isDeleteOperation) {
                if (hasSelectClause) {
                    // UPDATE/DELETE with .select() - should return 200 OK with data
                    response = {
                        data: data,
                        status: 200,
                        statusText: "OK"
                    };
                } else {
                    // UPDATE/DELETE without .select() - should return 204 No Content, no data
                    response = {
                        status: 204,
                        statusText: "No Content"
                    };
                }
            } else {
                // Normal SELECT query - should return 200 OK with data
                response = {
                    data: data,
                    status: 200,
                    statusText: "OK"
                };
            }
        } else if (typeof count !== 'undefined') {
            // Count query
            response = {
                count: count,
                status: 200,
                statusText: "OK"
            };
        } else if (typeof error === 'undefined' || error === null) {
            // Check if the API response has status info directly
            if (typeof status !== 'undefined' && typeof statusText !== 'undefined') {
                // Use the API response status directly when available
                response = {
                    status: status,
                    statusText: statusText
                };
            } else {
                // INSERT/UPDATE/DELETE operations that succeed (no data/count returned, no error)
                const codeString = `<code_content>`;
                const isInsertOperation = codeString.includes('.insert(');
                const isUpsertOperation = codeString.includes('.upsert(');
                const isUpdateOperation = codeString.includes('.update(');
                const isDeleteOperation = codeString.includes('.delete(');
                
                if (isInsertOperation || isUpsertOperation) {
                    // INSERT/UPSERT without .select() - should return 201 Created
                    response = {
                        status: 201,
                        statusText: "Created"
                    };
                } else if (isUpdateOperation || isDeleteOperation) {
                    // UPDATE/DELETE without .select() - should return 204 No Content
                    response = {
                        status: 204,
                        statusText: "No Content"
                    };
                } else {
                    // Fallback for other operations
                    response = {
                        status: 200,
                        statusText: "OK"
                    };
                }
            }
        } else {
            // Fallback - check what variables are available
            const availableVars = [];
            if (typeof data !== 'undefined') availableVars.push('data');
            if (typeof count !== 'undefined') availableVars.push('count');
            if (typeof error !== 'undefined') availableVars.push('error');
            throw new Error(`Could not determine response structure. Available variables: ${availableVars.join(', ')}`);
        }
        
        console.log('Data:', JSON.stringify(response));
    } catch (error) {
        console.error('Unexpected Error:', error);
        Deno.exit(1);
    }
}
run();